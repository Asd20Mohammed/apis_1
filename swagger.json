{
  "openapi": "3.0.0",
  "paths": {
    "/auth/signup": {
      "post": {
        "description": "Register a new user with optional profile image and cover image",
        "operationId": "AuthController_signUp",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User registration form with optional image and cover",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SignUpDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OTP sent to your email. Please verify to complete registration.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "OTP sent to your email. Please verify to complete registration."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Email is required",
                        "param": "email"
                      },
                      {
                        "message": "Password must be at least 8 characters long",
                        "param": "password"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists or is pending email confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User with this email already exists",
                        "param": "email"
                      }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid email format",
                        "param": "email"
                      },
                      {
                        "message": "Password is too weak",
                        "param": "password"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "User Registration",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/confirm-email": {
      "patch": {
        "operationId": "AuthController_confirmEmail",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "OTP confirmation payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/confirmEmailDto"
              },
              "examples": {
                "example1": {
                  "summary": "Confirm email with OTP",
                  "value": {
                    "email": "example@email.com",
                    "otp": "123456",
                    "FCMToken": "fcm-token-example",
                    "deviceId": "unique-device-id",
                    "deviceType": "android"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email confirmed and user registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email successfully confirmed",
                    "data": {
                      "accessToken": "jwt-access-token",
                      "refreshToken": "jwt-refresh-token",
                      "accessExpiresAt": "2025-06-14T12:00:00.000Z",
                      "accessExpiresIn": 3600,
                      "refreshExpiresAt": "2025-06-21T12:00:00.000Z",
                      "refreshExpiresIn": 604800,
                      "user": {
                        "_id": "user-id",
                        "email": "example@email.com",
                        "name": "User Name",
                        "username": "username123",
                        "isFullAdmin": false,
                        "confirmEmail": true,
                        "birthYear": "1990",
                        "country": "Egypt",
                        "gender": "female",
                        "image": {
                          "original": "https://example.com/image.jpg",
                          "thumbnail": "https://example.com/thumb.jpg"
                        },
                        "cover": {
                          "original": "https://example.com/cover.jpg",
                          "thumbnail": "https://example.com/cover-thumb.jpg"
                        },
                        "phone": "+201234567890"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation errors (e.g. missing fields)",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "otp must not be empty",
                        "param": "otp"
                      },
                      {
                        "message": "deviceId must not be empty",
                        "param": "deviceId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "OTP expired or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid OTP",
                        "param": "otp"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "No pending registration or OTP expired",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "No pending registration found or OTP expired",
                        "param": "email"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "Confirm user email with OTP and finalize registration",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/signin": {
      "post": {
        "description": "Authenticates a user using email and password credentials",
        "operationId": "AuthController_signin",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "User successfully authenticated"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token"
                        },
                        "refreshToken": {
                          "type": "string",
                          "description": "JWT refresh token"
                        },
                        "accessExpiresAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Access token expiration timestamp"
                        },
                        "accessExpiresIn": {
                          "type": "5000",
                          "description": "Access token validity period in seconds"
                        },
                        "refreshExpiresAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Refresh token expiration timestamp"
                        },
                        "refreshExpiresIn": {
                          "type": "5000",
                          "description": "Refresh token validity period in seconds"
                        },
                        "user": {
                          "type": "object",
                          "description": "Authenticated user data",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "description": "User ID"
                            },
                            "email": {
                              "type": "string",
                              "description": "User email"
                            },
                            "name": {
                              "type": "string",
                              "description": "User name"
                            },
                            "username": {
                              "type": "string",
                              "description": "User username"
                            },
                            "isFullAdmin": {
                              "type": "boolean",
                              "description": "Is user full admin"
                            },
                            "confirmEmail": {
                              "type": "boolean",
                              "description": "Has user confirmed email"
                            },
                            "birthYear": {
                              "type": "string",
                              "description": "User birth year"
                            },
                            "country": {
                              "type": "string",
                              "description": "User country"
                            },
                            "gender": {
                              "type": "string",
                              "description": "User gender"
                            },
                            "phone": {
                              "type": "string",
                              "description": "User phone number"
                            },
                            "image": {
                              "type": "object",
                              "properties": {
                                "original": {
                                  "type": "string",
                                  "description": "Original image URL"
                                },
                                "thumbnail": {
                                  "type": "string",
                                  "description": "Thumbnail image URL"
                                }
                              }
                            },
                            "cover": {
                              "type": "object",
                              "properties": {
                                "original": {
                                  "type": "string",
                                  "description": "Original cover URL"
                                },
                                "thumbnail": {
                                  "type": "string",
                                  "description": "Thumbnail cover URL"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "message": {
                                "type": "string",
                                "example": "Email is required"
                              },
                              "param": {
                                "type": "string",
                                "example": "email"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "message": {
                                "type": "string",
                                "example": "Invalid credentials"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "User sign in",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/forgot-password": {
      "patch": {
        "operationId": "AuthController_sendResetPasswordOtp",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User email to receive reset password OTP",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordDto"
              },
              "examples": {
                "example1": {
                  "summary": "Send OTP",
                  "value": {
                    "email": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully to email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset email has been sent"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Email not associated with any account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "No account is associated with this email"
                          },
                          "param": {
                            "type": "string",
                            "example": "email"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Send OTP to email for password reset",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/reset-password": {
      "patch": {
        "description": "Allows the user to reset their password using email and OTP",
        "operationId": "AuthController_resetPassword",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User email, OTP, and new password info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              },
              "examples": {
                "example": {
                  "summary": "Reset password example",
                  "value": {
                    "email": "user@example.com",
                    "otp": "123456",
                    "newPassword": "NewStrongPass123!",
                    "confirmPassword": "NewStrongPass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password has been reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Passwords do not match or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Passwords do not match"
                          },
                          "param": {
                            "type": "string",
                            "example": "confirmPassword"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid OTP"
                          },
                          "param": {
                            "type": "string",
                            "example": "otp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found with given email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "No account is associated with this email"
                          },
                          "param": {
                            "type": "string",
                            "example": "email"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Reset password using OTP",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/signin-with-google": {
      "post": {
        "description": "Authenticate or register a user using Google OAuth token",
        "operationId": "AuthController_signinWithGoogle",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Google authentication token and device information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWithGoogleTokenDto"
              },
              "examples": {
                "example1": {
                  "summary": "Sign in with Google token",
                  "value": {
                    "token": "google-oauth-token-here",
                    "FCMToken": "fcm-token-example",
                    "deviceId": "unique-device-id",
                    "deviceType": "android"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated with Google",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "accessToken": "jwt-access-token",
                    "refreshToken": "jwt-refresh-token",
                    "accessExpiresAt": "2024-12-31T23:59:59.000Z",
                    "accessExpiresIn": 3600,
                    "refreshExpiresAt": "2024-12-31T23:59:59.000Z",
                    "refreshExpiresIn": 604800,
                    "user": {
                      "_id": "user-id",
                      "email": "user@gmail.com",
                      "name": "John Doe",
                      "username": "johndoe",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1990",
                      "country": "Egypt",
                      "gender": "male",
                      "image": {
                        "original": "https://example.com/original.jpg",
                        "thumbnail": "https://example.com/thumbnail.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/cover-original.jpg",
                        "thumbnail": "https://example.com/cover-thumbnail.jpg"
                      },
                      "phone": "+201234567890"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Google token is required",
                        "param": "token"
                      },
                      {
                        "message": "Device ID is required",
                        "param": "deviceId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Google token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid Google token",
                        "param": "token"
                      }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid device type",
                        "param": "deviceType"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "Sign in with Google",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/signin-with-apple": {
      "post": {
        "description": "Authenticate or register a user using Apple ID token",
        "operationId": "AuthController_signinWithApple",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Apple ID token and device information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWithAppleTokenDto"
              },
              "examples": {
                "example1": {
                  "summary": "Sign in with Apple token",
                  "value": {
                    "token": "apple-id-token-here",
                    "FCMToken": "fcm-token-example",
                    "deviceId": "unique-device-id",
                    "deviceType": "ios"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated with Apple",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "accessToken": "jwt-access-token",
                    "refreshToken": "jwt-refresh-token",
                    "accessExpiresAt": "2024-12-31T23:59:59.000Z",
                    "accessExpiresIn": 3600,
                    "refreshExpiresAt": "2024-12-31T23:59:59.000Z",
                    "refreshExpiresIn": 604800,
                    "user": {
                      "_id": "user-id",
                      "email": "user@icloud.com",
                      "name": "John Apple",
                      "username": "johnapple",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1990",
                      "country": "Egypt",
                      "gender": "male",
                      "image": {
                        "original": "https://example.com/original.jpg",
                        "thumbnail": "https://example.com/thumbnail.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/cover-original.jpg",
                        "thumbnail": "https://example.com/cover-thumbnail.jpg"
                      },
                      "phone": "+201234567890"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Apple ID token is required",
                        "param": "token"
                      },
                      {
                        "message": "Device ID is required",
                        "param": "deviceId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Apple token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid Apple ID token",
                        "param": "token"
                      }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid device type",
                        "param": "deviceType"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "Sign in with Apple",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/guest-signin": {
      "post": {
        "operationId": "AuthController_guestSignIn",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Provide device details to create a guest session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/guestSignIn"
              },
              "examples": {
                "example1": {
                  "summary": "Guest sign-in",
                  "value": {
                    "deviceId": "device-abc-123",
                    "deviceType": "web"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Guest signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "accessToken": "JWT access token",
                      "refreshToken": "JWT refresh token",
                      "accessExpiresAt": "2025-06-14T20:30:00.000Z",
                      "accessExpiresIn": 3600,
                      "refreshExpiresAt": "2025-07-14T20:30:00.000Z",
                      "refreshExpiresIn": 2592000,
                      "user": {
                        "_id": "guest_420aa2bc-1d8a-40cb-a0b7-7a1234567890",
                        "roles": [
                          "guest"
                        ],
                        "isGuest": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error in device information",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "deviceId must not be empty",
                        "param": "deviceId"
                      },
                      {
                        "message": "deviceType must be either \"web\", \"mobile\", or \"desktop\"",
                        "param": "deviceType"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "Sign in as a guest user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/refresh-token": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Send refresh token and device ID to renew your session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              },
              "examples": {
                "example1": {
                  "summary": "Refresh token example",
                  "value": {
                    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "deviceId": "device-123",
                    "deviceType": "web"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "accessToken": "string",
                      "refreshToken": "string",
                      "accessExpiresAt": "2025-06-14T12:00:00.000Z",
                      "accessExpiresIn": 3600,
                      "refreshExpiresAt": "2025-06-21T12:00:00.000Z",
                      "refreshExpiresIn": 604800,
                      "user": {
                        "_id": "user-id",
                        "email": "user@example.com",
                        "name": "John Doe",
                        "username": "johndoe",
                        "isFullAdmin": false,
                        "confirmEmail": true,
                        "birthYear": "1995",
                        "country": "Egypt",
                        "gender": "female",
                        "image": {
                          "original": "https://example.com/image.jpg",
                          "thumbnail": "https://example.com/thumb.jpg"
                        },
                        "cover": {
                          "original": "https://example.com/cover.jpg",
                          "thumbnail": "https://example.com/cover-thumb.jpg"
                        },
                        "phone": "+201234567890"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "deviceId must not be empty",
                        "param": "deviceId"
                      },
                      {
                        "message": "refreshToken must be a string",
                        "param": "refreshToken"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token / invalid device",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid refresh token",
                        "param": "refreshToken"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "user"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "Generate new access and refresh tokens using refresh token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Retrieves a list of users based on provided filter criteria",
        "operationId": "UsersController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "required": false,
            "name": "ignoreLimit",
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "507f1f77bcf86cd799439011",
                        "email": "user@example.com",
                        "name": "John Doe",
                        "username": "johndoe",
                        "isFullAdmin": false,
                        "confirmEmail": true,
                        "birthYear": "1995",
                        "country": "Egypt",
                        "gender": "male",
                        "phone": "+201234567890",
                        "image": {
                          "original": "https://example.com/image.jpg",
                          "thumbnail": "https://example.com/thumb.jpg"
                        },
                        "cover": {
                          "original": "https://example.com/cover.jpg",
                          "thumbnail": "https://example.com/cover-thumb.jpg"
                        },
                        "categories": [
                          "507f1f77bcf86cd799439012"
                        ],
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      }
                    ],
                    "total": 1,
                    "page": 1,
                    "limit": 10,
                    "totalPages": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "page must be a positive number",
                        "param": "page"
                      },
                      {
                        "message": "limit must be between 1 and 100",
                        "param": "limit"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No access to this resource",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to access this resource"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Users List",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/update-fcm-token": {
      "post": {
        "description": "Updates a user's FCM token for a specific device to enable push notifications",
        "operationId": "UsersController_updateFCMToken",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFCMTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCM token updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "507f1f77bcf86cd799439011",
                      "email": "user@example.com",
                      "name": "John Doe",
                      "username": "johndoe",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1995",
                      "country": "Egypt",
                      "gender": "male",
                      "phone": "+201234567890",
                      "image": {
                        "original": "https://example.com/image.jpg",
                        "thumbnail": "https://example.com/thumb.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/cover.jpg",
                        "thumbnail": "https://example.com/cover-thumb.jpg"
                      },
                      "fcmTokens": [
                        {
                          "deviceId": "device-123",
                          "token": "updated-fcm-token-here",
                          "updatedAt": "2023-01-01T00:00:00.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid FCM token or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "FCM token must not be empty",
                        "param": "FCMToken"
                      },
                      {
                        "message": "Device ID must not be empty",
                        "param": "deviceId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update FCM Token",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves a specific user by their unique identifier",
        "operationId": "UsersController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "507f1f77bcf86cd799439011",
                      "email": "user@example.com",
                      "name": "John Doe",
                      "username": "johndoe",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1995",
                      "country": "Egypt",
                      "gender": "male",
                      "phone": "+201234567890",
                      "image": {
                        "original": "https://example.com/image.jpg",
                        "thumbnail": "https://example.com/thumb.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/cover.jpg",
                        "thumbnail": "https://example.com/cover-thumb.jpg"
                      },
                      "categories": [
                        {
                          "_id": "507f1f77bcf86cd799439012",
                          "name": "Technology",
                          "nameAr": "التكنولوجيا"
                        }
                      ],
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid ObjectId format",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get User by ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Updates user information including profile image and cover image",
        "operationId": "UsersController_updateUser",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "507f1f77bcf86cd799439011",
                      "email": "updated@example.com",
                      "name": "Updated Name",
                      "username": "updatedusername",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1995",
                      "country": "Egypt",
                      "gender": "female",
                      "phone": "+201234567890",
                      "bio": "Updated bio description",
                      "image": {
                        "original": "https://example.com/new-image.jpg",
                        "thumbnail": "https://example.com/new-thumb.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/new-cover.jpg",
                        "thumbnail": "https://example.com/new-cover-thumb.jpg"
                      },
                      "categories": [
                        "507f1f77bcf86cd799439012"
                      ],
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Email must be valid",
                        "param": "email"
                      },
                      {
                        "message": "Name must be at least 2 characters long",
                        "param": "name"
                      },
                      {
                        "message": "File size must be less than 5MB",
                        "param": "image"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You are not allowed to update this user",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "You are not allowed to update this user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Deletes a user and all related data permanently from the system",
        "operationId": "UsersController_deleteUser",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User deleted successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID or deletion failed",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid ObjectId format",
                        "param": "id"
                      },
                      {
                        "message": "user.not.allowed.to.delete",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete this user",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to delete this user"
                      },
                      {
                        "message": "You can only delete your own account"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete User",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/confirm-email": {
      "put": {
        "description": "Confirms a user's email using OTP verification",
        "operationId": "UsersController_confirmEmail",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "507f1f77bcf86cd799439011",
                      "email": "confirmed@example.com",
                      "name": "John Doe",
                      "username": "johndoe",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1995",
                      "country": "Egypt",
                      "gender": "male",
                      "phone": "+201234567890",
                      "image": {
                        "original": "https://example.com/image.jpg",
                        "thumbnail": "https://example.com/thumb.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/cover.jpg",
                        "thumbnail": "https://example.com/cover-thumb.jpg"
                      },
                      "emailConfirmedAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid OTP or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid OTP code",
                        "param": "otp"
                      },
                      {
                        "message": "OTP has expired",
                        "param": "otp"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Confirm User Email",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/add-category": {
      "post": {
        "description": "Adds a category to a user profile to track their interests",
        "operationId": "UsersController_addCategoryToUser",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "507f1f77bcf86cd799439011",
                      "email": "user@example.com",
                      "name": "John Doe",
                      "username": "johndoe",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1995",
                      "country": "Egypt",
                      "gender": "male",
                      "phone": "+201234567890",
                      "image": {
                        "original": "https://example.com/image.jpg",
                        "thumbnail": "https://example.com/thumb.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/cover.jpg",
                        "thumbnail": "https://example.com/cover-thumb.jpg"
                      },
                      "categories": [
                        {
                          "_id": "507f1f77bcf86cd799439012",
                          "name": "Technology",
                          "nameAr": "التكنولوجيا"
                        },
                        {
                          "_id": "507f1f77bcf86cd799439013",
                          "name": "Sports",
                          "nameAr": "الرياضة"
                        }
                      ],
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Category ID must be a valid ObjectId",
                        "param": "categoryId"
                      },
                      {
                        "message": "Category is already added to user",
                        "param": "categoryId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or category not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "id"
                      },
                      {
                        "message": "Category not found",
                        "param": "categoryId"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add Category to User",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/remove-category": {
      "post": {
        "description": "Removes a category from a user profile",
        "operationId": "UsersController_removeCategoryFromUser",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "507f1f77bcf86cd799439011",
                      "email": "user@example.com",
                      "name": "John Doe",
                      "username": "johndoe",
                      "isFullAdmin": false,
                      "confirmEmail": true,
                      "birthYear": "1995",
                      "country": "Egypt",
                      "gender": "male",
                      "phone": "+201234567890",
                      "image": {
                        "original": "https://example.com/image.jpg",
                        "thumbnail": "https://example.com/thumb.jpg"
                      },
                      "cover": {
                        "original": "https://example.com/cover.jpg",
                        "thumbnail": "https://example.com/cover-thumb.jpg"
                      },
                      "categories": [
                        {
                          "_id": "507f1f77bcf86cd799439012",
                          "name": "Technology",
                          "nameAr": "التكنولوجيا"
                        }
                      ],
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID or category not found in user profile",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Category ID must be a valid ObjectId",
                        "param": "categoryId"
                      },
                      {
                        "message": "Category not found in user profile",
                        "param": "categoryId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "User not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove Category from User",
        "tags": [
          "Users"
        ]
      }
    },
    "/access-control/action": {
      "get": {
        "description": "Retrieves a paginated list of all actions in the system. Requires appropriate permissions.",
        "operationId": "ActionsController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "Whether to ignore pagination limit and return all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "685db46fe2eef5c54626ffed",
                        "name": "create",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c54626ffee",
                        "name": "read",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c54626ffef",
                        "name": "update",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c54626fff0",
                        "name": "delete",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      }
                    ],
                    "total": 10,
                    "page": 1,
                    "limit": 10,
                    "totalPages": 1
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read actions",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to read actions"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get All Actions",
        "tags": [
          "Actions"
        ]
      }
    },
    "/access-control/resource": {
      "get": {
        "description": "Retrieves a paginated list of all resources in the system. Requires appropriate permissions.",
        "operationId": "ResourcesController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "Whether to ignore pagination limit and return all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resources retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "685db46fe2eef5c54626fff9",
                        "name": "users",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c54626fffa",
                        "name": "clubs",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c54626fffb",
                        "name": "categories",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c546270005",
                        "name": "permissions",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      }
                    ],
                    "total": 25,
                    "page": 1,
                    "limit": 10,
                    "totalPages": 3
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read resources",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to read resources"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get All Resources",
        "tags": [
          "Resources"
        ]
      }
    },
    "/access-control/role": {
      "get": {
        "description": "Retrieves a paginated list of all roles in the system with their associated permissions. Requires appropriate permissions.",
        "operationId": "RolesController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "Whether to ignore pagination limit and return all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "685db46fe2eef5c546270020",
                        "name": "Admin",
                        "description": "Full system administrator with all permissions",
                        "permissions": [
                          "685db46fe2eef5c546270010",
                          "685db46fe2eef5c546270011",
                          "685db46fe2eef5c546270012"
                        ],
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c546270021",
                        "name": "Club Manager",
                        "description": "Manage clubs and club-related activities",
                        "permissions": [
                          "685db46fe2eef5c546270013",
                          "685db46fe2eef5c546270014"
                        ],
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c546270022",
                        "name": "Member",
                        "description": "Basic user with limited permissions",
                        "permissions": [
                          "685db46fe2eef5c546270015"
                        ],
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      }
                    ],
                    "total": 8,
                    "page": 1,
                    "limit": 10,
                    "totalPages": 1
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read roles",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to read roles"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get All Roles",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "description": "Creates a new role in the system with specified permissions. Requires appropriate access rights.",
        "operationId": "RolesController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Role creation details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270025",
                      "name": "Event Manager",
                      "description": "Manage events and related activities",
                      "permissions": [
                        "685db46fe2eef5c546270016",
                        "685db46fe2eef5c546270017"
                      ],
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Role name is required",
                        "param": "name"
                      },
                      {
                        "message": "Role description is required",
                        "param": "description"
                      },
                      {
                        "message": "At least one permission is required",
                        "param": "permissions"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create roles",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to create roles"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Role with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Role with this name already exists",
                        "param": "name"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/access-control/role/{id}": {
      "get": {
        "description": "Retrieves a specific role by its unique identifier. Requires appropriate permissions.",
        "operationId": "RolesController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Role ID",
            "schema": {
              "example": "685db46fe2eef5c546270020",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270020",
                      "name": "Admin",
                      "description": "Full system administrator with all permissions",
                      "permissions": [
                        "685db46fe2eef5c546270010",
                        "685db46fe2eef5c546270011",
                        "685db46fe2eef5c546270012"
                      ],
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid ObjectId format",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read roles",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to read roles"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Role not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Role by ID",
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "description": "Updates an existing role with new data, including permissions. Requires appropriate access rights.",
        "operationId": "RolesController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Role ID to update",
            "schema": {
              "example": "685db46fe2eef5c546270020",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Role update details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270020",
                      "name": "Updated Admin",
                      "description": "Updated admin role with enhanced permissions",
                      "permissions": [
                        "685db46fe2eef5c546270010",
                        "685db46fe2eef5c546270011",
                        "685db46fe2eef5c546270025"
                      ],
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data or ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid ObjectId format",
                        "param": "id"
                      },
                      {
                        "message": "Role name must be at least 3 characters",
                        "param": "name"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update roles",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to update roles"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Role not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Role with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Role with this name already exists",
                        "param": "name"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Role",
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "description": "Permanently removes a role from the system. Requires appropriate permissions.",
        "operationId": "RolesController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Role ID to delete",
            "schema": {
              "example": "685db46fe2eef5c546270020",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270020",
                      "name": "Deleted Role",
                      "description": "This role was deleted",
                      "permissions": [
                        "685db46fe2eef5c546270015"
                      ],
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete roles",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to delete roles"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Role not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/access-control/permission": {
      "get": {
        "description": "Retrieves a paginated list of all permissions in the system with associated actions and resources.",
        "operationId": "PermissionsController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "Whether to ignore pagination limit and return all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "685db46fe2eef5c546270010",
                        "name": "Full Control of Users",
                        "description": "Full control of users",
                        "actionsIds": [
                          "685db46fe2eef5c54626ffed",
                          "685db46fe2eef5c54626ffee",
                          "685db46fe2eef5c54626ffef",
                          "685db46fe2eef5c54626fff0"
                        ],
                        "resourceId": "685db46fe2eef5c54626fff9",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      },
                      {
                        "_id": "685db46fe2eef5c546270011",
                        "name": "Read Articles",
                        "description": "Read articles",
                        "actionsIds": [
                          "685db46fe2eef5c54626ffee"
                        ],
                        "resourceId": "685db46fe2eef5c546270012",
                        "createdAt": "2023-01-01T00:00:00.000Z",
                        "updatedAt": "2023-01-01T00:00:00.000Z"
                      }
                    ],
                    "total": 25,
                    "page": 1,
                    "limit": 10,
                    "totalPages": 3
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get All Permissions",
        "tags": [
          "Permissions"
        ]
      },
      "post": {
        "description": "Creates a new permission in the system with specified actions and resource. Requires appropriate permissions.",
        "operationId": "PermissionsController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Permission creation details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permission created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270015",
                      "name": "Manage Events",
                      "description": "Create and manage events",
                      "actionsIds": [
                        "685db46fe2eef5c54626ffed",
                        "685db46fe2eef5c54626ffee",
                        "685db46fe2eef5c54626ffef"
                      ],
                      "resourceId": "685db46fe2eef5c546270016",
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Permission name is required",
                        "param": "name"
                      },
                      {
                        "message": "Resource ID must be a valid ObjectId",
                        "param": "resourceId"
                      },
                      {
                        "message": "At least one action is required",
                        "param": "actionsIds"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create permissions",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to create permissions"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Permission with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Permission with this name already exists",
                        "param": "name"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create Permission",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/access-control/permission/{id}": {
      "get": {
        "description": "Retrieves a specific permission by its unique identifier. Requires appropriate permissions.",
        "operationId": "PermissionsController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Permission ID",
            "schema": {
              "example": "685db46fe2eef5c546270015",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270015",
                      "name": "Full Control of Users",
                      "description": "Full control of users",
                      "actionsIds": [
                        "685db46fe2eef5c54626ffed",
                        "685db46fe2eef5c54626ffee",
                        "685db46fe2eef5c54626ffef",
                        "685db46fe2eef5c54626fff0"
                      ],
                      "resourceId": "685db46fe2eef5c54626fff9",
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid ObjectId format",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read permissions",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to read permissions"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Permission with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Permission not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Permission by ID",
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "description": "Updates an existing permission with new data. Requires appropriate permissions.",
        "operationId": "PermissionsController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Permission ID to update",
            "schema": {
              "example": "685db46fe2eef5c546270015",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Permission update details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permission updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270015",
                      "name": "Updated Permission Name",
                      "description": "Updated permission description",
                      "actionsIds": [
                        "685db46fe2eef5c54626ffed",
                        "685db46fe2eef5c54626ffee"
                      ],
                      "resourceId": "685db46fe2eef5c54626fff9",
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data or ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid ObjectId format",
                        "param": "id"
                      },
                      {
                        "message": "Permission name must be at least 3 characters",
                        "param": "name"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update permissions",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to update permissions"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Permission with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Permission not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Permission with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Permission with this name already exists",
                        "param": "name"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Permission",
        "tags": [
          "Permissions"
        ]
      },
      "delete": {
        "description": "Permanently removes a permission from the system. Requires appropriate permissions.",
        "operationId": "PermissionsController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Permission ID to delete",
            "schema": {
              "example": "685db46fe2eef5c546270015",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "685db46fe2eef5c546270015",
                      "name": "Deleted Permission",
                      "description": "This permission was deleted",
                      "actionsIds": [
                        "685db46fe2eef5c54626ffee"
                      ],
                      "resourceId": "685db46fe2eef5c54626fff9",
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete permissions",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Insufficient permissions to delete permissions"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Permission with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Permission not found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Permission",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/access-control/user-club-role": {
      "get": {
        "description": "Retrieves a paginated list of all user-club-roles in the system, which define what roles users have in specific clubs.",
        "operationId": "UserClubRoleController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "Whether to ignore pagination limit",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-club-roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClubRoleResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all user-club-roles with pagination",
        "tags": [
          "User-Club-Roles"
        ]
      },
      "post": {
        "description": "Assigns one or more roles to a user within a specific club context.",
        "operationId": "UserClubRoleController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserClubRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User-club-role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClubRoleDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - User-club-role assignment already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new user-club-role",
        "tags": [
          "User-Club-Roles"
        ]
      }
    },
    "/access-control/user-club-role/{id}": {
      "get": {
        "description": "Retrieves a specific user-club-role by its unique identifier. Requires appropriate permissions.",
        "operationId": "UserClubRoleController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User-club-role ID",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-club-role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClubRoleDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read user-club-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - User-club-role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a user-club-role by ID",
        "tags": [
          "User-Club-Roles"
        ]
      },
      "patch": {
        "description": "Updates an existing user-club-role with new data, including changing role assignments. Requires appropriate permissions.",
        "operationId": "UserClubRoleController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User-club-role ID to update",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserClubRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User-club-role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClubRoleDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data or ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update user-club-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - User-club-role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a user-club-role by ID",
        "tags": [
          "User-Club-Roles"
        ]
      },
      "delete": {
        "description": "Permanently removes a user-club-role assignment from the system. Requires appropriate permissions.",
        "operationId": "UserClubRoleController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User-club-role ID to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-club-role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClubRoleDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete user-club-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - User-club-role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a user-club-role by ID",
        "tags": [
          "User-Club-Roles"
        ]
      }
    },
    "/access-control/user-system-roles": {
      "get": {
        "description": "Retrieves a paginated list of all user-system-roles in the system. These define what system-level roles users have. Requires appropriate permissions.",
        "operationId": "UserSystemRolesController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "Whether to ignore pagination limit",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-system-roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSystemRoleResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read user-system-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all user-system-roles with pagination",
        "tags": [
          "User-System-Roles"
        ]
      },
      "post": {
        "description": "Assigns a system-level role to a user. Requires appropriate permissions.",
        "operationId": "UserSystemRolesController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserSystemRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User-system-role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSystemRoleDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create user-system-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - User-system-role assignment already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new user-system-role",
        "tags": [
          "User-System-Roles"
        ]
      }
    },
    "/access-control/user-system-roles/{id}": {
      "get": {
        "description": "Retrieves a specific user-system-role by its unique identifier. Requires appropriate permissions.",
        "operationId": "UserSystemRolesController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User-system-role ID",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-system-role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSystemRoleDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read user-system-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - User-system-role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a user-system-role by ID",
        "tags": [
          "User-System-Roles"
        ]
      },
      "patch": {
        "description": "Updates an existing user-system-role with new data. Requires appropriate permissions.",
        "operationId": "UserSystemRolesController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User-system-role ID to update",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserSystemRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User-system-role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSystemRoleDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data or ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update user-system-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - User-system-role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a user-system-role by ID",
        "tags": [
          "User-System-Roles"
        ]
      },
      "delete": {
        "description": "Permanently removes a user-system-role assignment from the system. Requires appropriate permissions.",
        "operationId": "UserSystemRolesController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User-system-role ID to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-system-role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSystemRoleDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete user-system-roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - User-system-role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a user-system-role by ID",
        "tags": [
          "User-System-Roles"
        ]
      }
    },
    "/phone/send-otp": {
      "post": {
        "description": "Sends an OTP code to the provided phone number",
        "operationId": "PhoneVerificationController_sendOtp",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPhoneVerificationCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "OTP sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Phone number is required"
                          },
                          "param": {
                            "type": "string",
                            "example": "phone"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Send OTP",
        "tags": [
          "Phone"
        ]
      }
    },
    "/phone/verify-otp": {
      "post": {
        "description": "Verifies the OTP code for the given phone number and updates user phone if valid",
        "operationId": "PhoneVerificationController_verifyOtp",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPhoneCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "verified": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or OTP expired/not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "otp.expired.or.not.found"
                          },
                          "param": {
                            "type": "string",
                            "example": "phone"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "invalid.otp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Verify OTP",
        "tags": [
          "Phone"
        ]
      }
    },
    "/categories": {
      "get": {
        "description": "Retrieves a paginated list of all active categories. Supports filtering and pagination.",
        "operationId": "CategoriesController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by category name",
            "schema": {
              "example": "Sports"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {
              "example": 10
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all categories with pagination",
        "tags": [
          "Categories"
        ]
      },
      "post": {
        "description": "Creates a new category with optional icon. Requires CREATE permission for CATEGORIES resource.",
        "operationId": "CategoriesController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrapperCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Category with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "File too large - Maximum 50MB allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTooLargeErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new category",
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/admin": {
      "get": {
        "description": "Retrieves a paginated list of all categories including inactive ones. Admin access only.",
        "operationId": "CategoriesController_findAllAdmin",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by category name",
            "schema": {
              "example": "Sports"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {
              "example": 10
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access admin categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all categories with pagination (admin view)",
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/{id}": {
      "get": {
        "description": "Retrieves a specific category by its ID.",
        "operationId": "CategoriesController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarpperCategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid category ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorsDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a category by id",
        "tags": [
          "Categories"
        ]
      },
      "patch": {
        "description": "Updates an existing category by its ID. Requires UPDATE permission for CATEGORIES resource.",
        "operationId": "CategoriesController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrapperCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorsDto"
                }
              }
            }
          },
          "413": {
            "description": "File too large - Maximum 50MB allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTooLargeErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a category by id",
        "tags": [
          "Categories"
        ]
      },
      "delete": {
        "description": "Deletes a category by its ID. Requires DELETE permission for CATEGORIES resource.",
        "operationId": "CategoriesController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorsDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a category by id",
        "tags": [
          "Categories"
        ]
      }
    },
    "/clubs/feed": {
      "get": {
        "operationId": "ClubsController_feed",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/create-club": {
      "post": {
        "description": "Allows a user to create a new club. If the club is \"official\" and the email is not verified, an OTP will be sent to verify the official email before completing creation.",
        "operationId": "ClubsController_createClub",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Club data including name, description, type, image, and settings.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateClubDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verification required to proceed with official club creation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Please verify your email to complete club creation."
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Club successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Club created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "clubName": {
                          "type": "object",
                          "properties": {
                            "en": {
                              "type": "string",
                              "example": "Tech Club"
                            },
                            "ar": {
                              "type": "string",
                              "example": "نادي التقنية"
                            }
                          }
                        },
                        "slug": {
                          "type": "string",
                          "example": "tech-club"
                        },
                        "description": {
                          "type": "object",
                          "properties": {
                            "en": {
                              "type": "string",
                              "example": "A club for tech lovers"
                            },
                            "ar": {
                              "type": "string",
                              "example": "نادي لمحبي التقنية"
                            }
                          }
                        },
                        "logo": {
                          "type": "string",
                          "example": "https://example.com/logo.png"
                        },
                        "cover": {
                          "type": "string",
                          "example": "https://example.com/cover.jpg"
                        },
                        "type": {
                          "type": "string",
                          "example": "official",
                          "enum": [
                            "official",
                            "unofficial"
                          ]
                        },
                        "status": {
                          "type": "string",
                          "example": "active",
                          "enum": [
                            "active",
                            "inactive",
                            "pending"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "example": "664aeb02f0a660c3b2b71635"
                        },
                        "createdBy": {
                          "type": "string",
                          "example": "664aeb02f0a660c3b2b71612"
                        },
                        "clubSettings": {
                          "type": "object",
                          "properties": {
                            "chat": {
                              "type": "boolean",
                              "example": true
                            },
                            "joinRequest": {
                              "type": "boolean",
                              "example": false
                            },
                            "memberVisibility": {
                              "type": "boolean",
                              "example": true
                            },
                            "post": {
                              "type": "boolean",
                              "example": true
                            },
                            "showInfo": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid data or inappropriate language",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Club Arabic name contains inappropriate language."
                          },
                          "param": {
                            "type": "string",
                            "example": "clubName.ar"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "User not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "userId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "This email is already in use."
                          },
                          "param": {
                            "type": "string",
                            "example": "officialEmail"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error - invalid OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid OTP"
                          },
                          "param": {
                            "type": "string",
                            "example": "otp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Something went wrong. Please try again."
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new club",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/verify-official-email": {
      "post": {
        "description": "Verify the official email of the creator who submitted a pending club registration",
        "operationId": "ClubsController_VerifyOfficialEmail",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Payload containing OTP and email info for verification",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOfficialEmail"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Club created successfully after verifying the official email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Club created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "clubName": {
                          "type": "object",
                          "properties": {
                            "en": {
                              "type": "string",
                              "example": "Football Club"
                            },
                            "ar": {
                              "type": "string",
                              "example": "نادي كرة القدم"
                            }
                          }
                        },
                        "description": {
                          "type": "object",
                          "properties": {
                            "en": {
                              "type": "string",
                              "example": "Official football club for professionals"
                            },
                            "ar": {
                              "type": "string",
                              "example": "النادي الرسمي لكرة القدم للمحترفين"
                            }
                          }
                        },
                        "slug": {
                          "type": "string",
                          "example": "football-club"
                        },
                        "clubType": {
                          "type": "string",
                          "example": "official"
                        },
                        "clubVerified": {
                          "type": "boolean",
                          "example": true
                        },
                        "clubCountry": {
                          "type": "string",
                          "example": "EG"
                        },
                        "welcomMsg": {
                          "type": "string",
                          "example": "Welcome to our football family!"
                        },
                        "image": {
                          "type": "object",
                          "properties": {
                            "original": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string",
                                  "example": "https://example.com/images/clubs/football-original.jpg"
                                },
                                "width": {
                                  "type": "number",
                                  "example": 1920
                                },
                                "height": {
                                  "type": "number",
                                  "example": 1080
                                },
                                "size": {
                                  "type": "number",
                                  "example": 1024
                                }
                              }
                            },
                            "thumbnail": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string",
                                  "example": "https://example.com/images/clubs/football-thumbnail.jpg"
                                },
                                "width": {
                                  "type": "number",
                                  "example": 300
                                },
                                "height": {
                                  "type": "number",
                                  "example": 300
                                },
                                "size": {
                                  "type": "number",
                                  "example": 64
                                }
                              }
                            }
                          }
                        },
                        "createdBy": {
                          "type": "string",
                          "example": "507f1f77bcf86cd799439011"
                        },
                        "categoryId": {
                          "type": "string",
                          "example": "60d21b4667d0d8992e610c85"
                        },
                        "subCategoryId": {
                          "type": "string",
                          "example": "60d21b4667d0d8992e610c86"
                        },
                        "clubAccessability": {
                          "type": "string",
                          "example": "public"
                        },
                        "clubVisibility": {
                          "type": "boolean",
                          "example": true
                        },
                        "clubFollowable": {
                          "type": "boolean",
                          "example": true
                        },
                        "clubPlan": {
                          "type": "string",
                          "example": "premium"
                        },
                        "planId": {
                          "type": "string",
                          "example": "60d21b4667d0d8992e610c87"
                        },
                        "isSubscriptionActive": {
                          "type": "boolean",
                          "example": true
                        },
                        "groupName": {
                          "type": "string",
                          "example": "Team"
                        },
                        "enableJoiningQuestions": {
                          "type": "boolean",
                          "example": false
                        },
                        "membersNumber": {
                          "type": "number",
                          "example": 150
                        },
                        "hiddenMembersNumber": {
                          "type": "number",
                          "example": 10
                        },
                        "joinRequestsNumber": {
                          "type": "number",
                          "example": 5
                        },
                        "inviteLink": {
                          "type": "string",
                          "example": "https://example.com/invite/abc123"
                        },
                        "qrCode": {
                          "type": "string",
                          "example": "https://api.qrserver.com/v1/create-qr-code/?data=https://example.com/invite/abc123"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-01T12:00:00Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-01T12:00:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error - invalid OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid OTP"
                          },
                          "param": {
                            "type": "string",
                            "example": "otp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify Official Email of the creator",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs": {
      "get": {
        "operationId": "ClubsController_find",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Search by club name",
            "schema": {
              "example": "Club Name",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clubs fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedClubResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/{clubId}/policies": {
      "patch": {
        "description": "Updates an existing club policies with new data. Requires appropriate permissions.",
        "operationId": "ClubsController_updatePolicies",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePoliciesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permission updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clubpoliciesDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Permission with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Permission with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update club policies by ID",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/{clubId}/settings": {
      "patch": {
        "description": "Updates an existing club settings with new data. Requires appropriate permissions.",
        "operationId": "ClubsController_updateSettings",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permission updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clubSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Permission with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Permission with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update club settings by ID",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/{clubId}/confirm-official-email": {
      "patch": {
        "description": "Updates an existing club official email with new data. Requires appropriate permissions.",
        "operationId": "ClubsController_confirmOfficialEmail",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmOfficialEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permission updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clubconfirmEmailDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Permission with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Permission with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update club official email by ID",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/{clubId}/update-navigators": {
      "patch": {
        "description": "Updates an existing club navigators with new data. Requires appropriate permissions.",
        "operationId": "ClubsController_updateNavigators",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClubNavigatorsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Navigators updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clubNavigatorsDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data or ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Permission with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Permission with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update club navigators by ID",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/{clubId}/feed": {
      "get": {
        "operationId": "ClubsController_getFeed",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "createdBy",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/search": {
      "get": {
        "operationId": "ClubsController_searchClubs",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "required": true,
            "in": "query",
            "schema": {
              "example": "sports club",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clubs found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "66528abc962c5aeaa0c70fff"
                          },
                          "clubName": {
                            "type": "string",
                            "example": "Sports Club"
                          },
                          "description": {
                            "type": "string",
                            "example": "A professional sports club"
                          },
                          "logo": {
                            "type": "string",
                            "example": "https://example.com/logo.png"
                          },
                          "createdBy": {
                            "type": "string",
                            "example": "662a12bc862d1a1b1a87abce"
                          },
                          "updatedBy": {
                            "type": "string",
                            "example": "662a12bc862d1a1b1a87abce"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-05-15T08:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-05-15T08:00:00.000Z"
                          }
                        }
                      }
                    },
                    "page": {
                      "type": "number",
                      "example": 1
                    },
                    "limit": {
                      "type": "number",
                      "example": 10
                    },
                    "pageCount": {
                      "type": "number",
                      "example": 8
                    },
                    "totalCount": {
                      "type": "number",
                      "example": 150
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search clubs by name",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/{clubId}": {
      "delete": {
        "operationId": "ClubsController_deleteClub",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "example": "662a12bc862d1a1b1a87abcd",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Club deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Club deleted successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a club by ID",
        "tags": [
          "Clubs"
        ]
      },
      "get": {
        "operationId": "ClubsController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the club details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "662a12bc862d1a1b1a87abcd"
                        },
                        "name": {
                          "type": "string",
                          "example": "Elite Fitness Club"
                        },
                        "description": {
                          "type": "string",
                          "example": "A premium fitness club with modern equipment and classes"
                        },
                        "logo": {
                          "type": "string",
                          "example": "https://yourcdn.com/logo.png"
                        },
                        "coverImage": {
                          "type": "string",
                          "example": "https://yourcdn.com/cover.jpg"
                        },
                        "address": {
                          "type": "string",
                          "example": "123 Main Street, Riyadh"
                        },
                        "phone": {
                          "type": "string",
                          "example": "+966500000000"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T10:00:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-05-30T08:00:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "club.not.found"
                          },
                          "param": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get club details by ID",
        "tags": [
          "Clubs"
        ]
      },
      "put": {
        "operationId": "ClubsController_updateClub",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClubDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a club by ID",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/list": {
      "get": {
        "operationId": "ClubsController_clubList",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of clubs with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "662a12bc862d1a1b1a87abcd"
                          },
                          "name": {
                            "type": "string",
                            "example": "Elite Fitness Club"
                          },
                          "description": {
                            "type": "string",
                            "example": "Premium fitness club in Riyadh"
                          },
                          "logo": {
                            "type": "string",
                            "example": "https://yourcdn.com/logo.png"
                          },
                          "coverImage": {
                            "type": "string",
                            "example": "https://yourcdn.com/cover.jpg"
                          },
                          "address": {
                            "type": "string",
                            "example": "123 Main Street, Riyadh"
                          },
                          "phone": {
                            "type": "string",
                            "example": "+966500000000"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-01T10:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-05-30T08:00:00.000Z"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "number",
                      "example": 25
                    },
                    "pageCount": {
                      "type": "number",
                      "example": 8
                    },
                    "page": {
                      "type": "number",
                      "example": 1
                    },
                    "limit": {
                      "type": "number",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Forbidden resource"
                          },
                          "param": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get paginated list of all clubs",
        "tags": [
          "Clubs"
        ]
      }
    },
    "/clubs/{clubId}/create-joining-question": {
      "post": {
        "operationId": "JoinRequestController_createJoiningQuestions",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club where the question will be added",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Joining question details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJoiningQuestionDto"
              },
              "examples": {
                "example1": {
                  "summary": "Sample joining question",
                  "value": {
                    "questionText": "Why do you want to join this club?",
                    "order": 1,
                    "type": "text",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Joining question created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Joining question saved successfully",
                    "data": [
                      {
                        "id": "uuid-generated-id",
                        "questionText": "Why do you want to join this club?",
                        "order": 1,
                        "type": "text",
                        "required": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new joining question for a specific club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/delete-joining-question": {
      "post": {
        "operationId": "JoinRequestController_removeJoiningQuestion",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club from which the question will be deleted",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data containing the ID of the question to delete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteJoiningQuestionDto"
              },
              "examples": {
                "example1": {
                  "summary": "Delete question example",
                  "value": {
                    "id": "uuid-of-question-to-delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Joining question deleted successfully with updated questions list",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Joining question deleted successfully",
                    "data": [
                      {
                        "id": "uuid-remaining-question-1",
                        "questionText": "Why do you want to join this club?",
                        "order": 1,
                        "type": "text",
                        "required": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a joining question from a specific club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/toggle-join-questions-visibility": {
      "post": {
        "operationId": "JoinRequestController_toggleJoiningQuestionVisibility",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Payload to enable or disable joining questions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleJoiningQuestionDto"
              },
              "examples": {
                "enable": {
                  "summary": "Enable joining questions",
                  "value": {
                    "isEnabled": true
                  }
                },
                "disable": {
                  "summary": "Disable joining questions",
                  "value": {
                    "isEnabled": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Visibility status of joining questions toggled",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "All joining questions are now visible",
                    "data": {
                      "enableJoiningQuestions": true
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Toggle visibility of all joining questions for a club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/update-joining-question": {
      "post": {
        "operationId": "JoinRequestController_updateJoiningQuestion",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data to update the joining question",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJoiningQuestionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Joining question updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Joining question updated successfully",
                    "data": {
                      "id": "uuid-of-question",
                      "questionText": "Updated question text?",
                      "order": 2,
                      "isRequired": true
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a joining question for a specific club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/get-joining-question": {
      "post": {
        "operationId": "JoinRequestController_getJoiningQuestionsForUser",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "If true, disables pagination and returns all questions",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of joining questions or empty array if joining questions are disabled",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "data": [
                        {
                          "id": "uuid-of-question",
                          "questionText": "What is your favorite sport?",
                          "order": 1,
                          "isRequired": true
                        }
                      ],
                      "totalCount": 5,
                      "pageCount": 1,
                      "page": 1,
                      "limit": 10
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get paginated joining questions for a club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/submit-joining-answers": {
      "post": {
        "operationId": "JoinRequestController_submitJoiningAnswers",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Answers to the joining questions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitJoiningAnswersDto"
              },
              "examples": {
                "example1": {
                  "value": {
                    "answers": [
                      {
                        "questionId": "uuid-of-question-1",
                        "answer": "My answer here"
                      },
                      {
                        "questionId": "uuid-of-question-2",
                        "answer": "Another answer"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful submission response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Answers submitted successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, e.g. missing required answers or invalid formats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Answer is required for question: What is your favorite sport?"
                        },
                        "param": {
                          "type": "string",
                          "example": "questionId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit answers for joining questions of a club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/check-club-accessibility": {
      "get": {
        "operationId": "JoinRequestController_getClubAccessability",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club for which to get the accessibility",
            "schema": {
              "example": "6810b4a12a4c08496fc536d1",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns whether the user is allowed to follow or access the club",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Club is open and followable",
                    "data": {
                      "allowed": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Club with ID 6810b4a12a4c08496fc536d1 not found"
                        },
                        "param": {
                          "type": "string",
                          "example": "clubId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the accessibility type (open - private - close)",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/follow-club": {
      "post": {
        "operationId": "JoinRequestController_followClub",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club to follow",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "isHidden",
            "required": false,
            "in": "query",
            "description": "Whether the user wants to follow the club anonymously",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Follow request body including joining answers (if any)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitJoiningAnswersDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Follow request sent and pending approval",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Your follow request is pending.",
                    "data": {
                      "_id": "666ab12345cdfe7890123456",
                      "userId": {
                        "_id": "665fccdd7c55e682ca14c999",
                        "name": "Rahma Ramadan",
                        "image": "https://example.com/profile.jpg"
                      },
                      "clubId": "665fcba87c55e682ca14c126",
                      "answers": [
                        {
                          "questionId": "666ab12345cdfe7890123456",
                          "answer": "My answer here"
                        }
                      ],
                      "isHidden": false,
                      "status": "pending",
                      "createdAt": "2025-05-18T10:00:00.000Z",
                      "updatedAt": "2025-05-18T10:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to guest user or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Guest user not allowed to follow clubs , please sign in to follow clubs"
                        },
                        "param": {
                          "type": "string",
                          "example": "guestUser"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Club not found"
                        },
                        "param": {
                          "type": "string",
                          "example": "clubId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a follow request to a club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/handle-join-request": {
      "post": {
        "operationId": "JoinRequestController_handleJoinRequest",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club where the join request was submitted",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Join request handling data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HandleJoinRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Join request handled successfully",
            "content": {
              "application/json": {
                "examples": {
                  "accept": {
                    "summary": "Accepted request",
                    "value": {
                      "message": "Request approved and member added successfully"
                    }
                  },
                  "reject": {
                    "summary": "Rejected request",
                    "value": {
                      "message": "Request rejected successfully"
                    }
                  },
                  "delete": {
                    "summary": "Deleted request",
                    "value": {
                      "message": "Join request deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid action provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid action"
                        },
                        "param": {
                          "type": "string",
                          "example": "action"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Join request not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Join request not found"
                        },
                        "param": {
                          "type": "string",
                          "example": "joinRequestId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Handle a join request by accepting, rejecting, or deleting it",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/get-join-requests": {
      "post": {
        "operationId": "JoinRequestController_getJoinRequests",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "If true, disables pagination and returns all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of pending join requests with total count and joinRequestsNumber",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "666ab12345cdfe7890123456",
                        "userId": {
                          "_id": "665fccdd7c55e682ca14c999",
                          "name": "Rahma Ramadan",
                          "image": "https://example.com/profile.jpg"
                        },
                        "clubId": "665fcba87c55e682ca14c126",
                        "isHidden": false
                      }
                    ],
                    "totalCount": 3,
                    "pageCount": 1,
                    "page": 1,
                    "limit": 10
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pending join requests for a club (with pagination)",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/get-rejected-join-requests": {
      "post": {
        "operationId": "JoinRequestController_getRejectedJoinRequests",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "If true, disables pagination and returns all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of rejected join requests with total count",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "666ab12345cdfe7890123456",
                        "userId": {
                          "_id": "665fccdd7c55e682ca14c999",
                          "name": "Rahma Ramadan",
                          "image": "https://example.com/profile.jpg"
                        },
                        "clubId": "665fcba87c55e682ca14c126",
                        "isHidden": false,
                        "rejectedReason": "Incomplete profile information",
                        "rejectedAt": "2025-05-18T10:00:00.000Z"
                      }
                    ],
                    "totalCount": 3,
                    "pageCount": 1,
                    "page": 1,
                    "limit": 10
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of rejected join requests for a specific club (with pagination)",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/accept-all-join-requests": {
      "post": {
        "operationId": "JoinRequestController_acceptAllJoinRequests",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All join requests approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "All join requests approved successfully"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve all pending join requests for a specific club",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{join}-request": {
      "get": {
        "description": "Retrieves join request by id ",
        "operationId": "JoinRequestController_findById",
        "parameters": [
          {
            "name": "joinRequestId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the join request",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "join request retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "60d21b4667d0d8992e610c86",
                      "clubId": "60d21b4667d0d8992e610c85",
                      "userId": "60d21b4667d0d8992e610c85",
                      "status": "PENDING",
                      "createdBy": "60d21b4667d0d8992e610c87",
                      "createdAt": "2023-08-15T10:30:00.000Z",
                      "updatedAt": "2023-08-15T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "join Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "join Request not found"
                        },
                        "param": {
                          "type": "string",
                          "example": "joinRequestId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get join request ",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/search-join-requests": {
      "post": {
        "operationId": "JoinRequestController_searchJoinRequests",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "If true, disables pagination and returns all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "searchTerm",
            "required": true,
            "in": "query",
            "description": "The search term to search for",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of join requests with total count",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "_id": "666ab12345cdfe7890123456",
                        "userId": {
                          "_id": "665fccdd7c55e682ca14c999",
                          "name": "Rahma Ramadan",
                          "image": "https://example.com/profile.jpg"
                        },
                        "clubId": "665fcba87c55e682ca14c126",
                        "isHidden": false
                      }
                    ],
                    "totalCount": 3,
                    "page": 1,
                    "limit": 10,
                    "pageCount": 1
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search join requests by name or email",
        "tags": [
          "Club Join Request"
        ]
      }
    },
    "/clubs/{clubId}/import-excel": {
      "post": {
        "operationId": "InvitationController_importExcel",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersFromExcelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Clubs Invitations"
        ]
      }
    },
    "/clubs/{clubId}/send-invitation": {
      "post": {
        "operationId": "InvitationController_sendInvitation",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendInvitionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Invitation sent successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Club not found"
                        },
                        "param": {
                          "type": "string",
                          "example": "clubId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send invitation to a user to join a club",
        "tags": [
          "Clubs Invitations"
        ]
      }
    },
    "/clubs/{clubId}/invitation-result": {
      "patch": {
        "operationId": "InvitationController_handleInvitationResult",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Payload to respond to a club invitation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationResultDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation successfully accepted or rejected.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Invitation accepted and user added to the club."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found for this user and club.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invitation not found for this user and club."
                        },
                        "param": {
                          "type": "string",
                          "example": "invitationId"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Invitation already accepted or rejected.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invitation already accepted."
                        },
                        "param": {
                          "type": "string",
                          "example": "invitationId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Respond to club invitation (accept or reject)",
        "tags": [
          "Clubs Invitations"
        ]
      }
    },
    "/clubs/{clubId}/invitation-list": {
      "get": {
        "operationId": "InvitationController_searchInvitationList",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "If true, disables pagination and returns all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "searchTerm",
            "required": false,
            "in": "query",
            "description": "The search term to search for",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of invitations for a specific club",
        "tags": [
          "Clubs Invitations"
        ]
      }
    },
    "/clubs/revoke-invitation": {
      "patch": {
        "operationId": "InvitationController_revoke",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Invitation revoked successfully."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invitation not found."
                        },
                        "param": {
                          "type": "string",
                          "example": "invitationId"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Cannot revoke an already accepted/rejected invitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Cannot revoke an already accepted/rejected invitation."
                        },
                        "param": {
                          "type": "string",
                          "example": "invitationId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Revoke an invitation for a specific club",
        "tags": [
          "Clubs Invitations"
        ]
      }
    },
    "/clubs/{clubId}/invitations-stats": {
      "get": {
        "operationId": "InvitationController_getStats",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "total": 100,
                      "accepted": 60,
                      "rejected": 10,
                      "pending": 20,
                      "revoked": 10,
                      "conversionRate": "60.00%",
                      "weeklyTrends": [
                        {
                          "date": "2025-05-15",
                          "sent": 10,
                          "accepted": 6,
                          "rejected": 1
                        },
                        {
                          "date": "2025-05-16",
                          "sent": 12,
                          "accepted": 7,
                          "rejected": 2
                        },
                        {
                          "date": "2025-05-17",
                          "sent": 8,
                          "accepted": 5,
                          "rejected": 0
                        },
                        {
                          "date": "2025-05-18",
                          "sent": 15,
                          "accepted": 9,
                          "rejected": 3
                        },
                        {
                          "date": "2025-05-19",
                          "sent": 20,
                          "accepted": 13,
                          "rejected": 1
                        },
                        {
                          "date": "2025-05-20",
                          "sent": 18,
                          "accepted": 12,
                          "rejected": 2
                        },
                        {
                          "date": "2025-05-21",
                          "sent": 17,
                          "accepted": 8,
                          "rejected": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get invitation statistics for a specific club",
        "tags": [
          "Clubs Invitations"
        ]
      }
    },
    "/clubs/verify-invitation-token": {
      "patch": {
        "operationId": "InvitationController_verifyInvitationToken",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyInvitationTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation accepted and user added to the club",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Invitation accepted and user added to the club."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired invitation link / invitation revoked / invalid invitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid or expired invitation link."
                        },
                        "param": {
                          "type": "string",
                          "example": "invitationId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify invitation token and accept the invitation",
        "tags": [
          "Clubs Invitations"
        ]
      }
    },
    "/clubs/{clubId}/members-list": {
      "get": {
        "operationId": "MembersController_memberslist",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "required": false,
            "name": "ignoreLimit",
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "clubId": {
                            "type": "string"
                          },
                          "isHidden": {
                            "type": "boolean"
                          },
                          "role": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "answers": {
                            "type": "array"
                          },
                          "membershipTitle": {
                            "type": "string"
                          },
                          "membershipTag": {
                            "type": "string"
                          },
                          "membershipExpiresAt": {
                            "type": "string"
                          },
                          "membershipAssignedAt": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "number"
                    },
                    "pageCount": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    },
                    "limit": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all members of a club",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/add-membership-tag": {
      "post": {
        "operationId": "MembersController_addMembershipTag",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMembershipTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The membership tag added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "665fcba87c55e682ca14c126",
                      "userId": "665fcba87c55e682ca14c126",
                      "clubId": "665fcba87c55e682ca14c126",
                      "isHidden": false,
                      "role": "follower",
                      "status": "approved",
                      "answers": [],
                      "membershipTitle": "Membership tag",
                      "membershipTag": "Membership tag",
                      "membershipExpiresAt": "2021-01-01",
                      "membershipAssignedAt": "2021-01-01",
                      "createdAt": "2021-01-01",
                      "updatedAt": "2021-01-01"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add a membership tag to a member",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/update-membership-tag": {
      "post": {
        "operationId": "MembersController_updateMembershipTag",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMembershipTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The membership tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "665fcba87c55e682ca14c126",
                      "userId": "665fcba87c55e682ca14c126",
                      "clubId": "665fcba87c55e682ca14c126",
                      "isHidden": false,
                      "role": "follower",
                      "status": "approved",
                      "answers": [],
                      "membershipTitle": "Membership tag",
                      "membershipTag": "Membership tag",
                      "membershipExpiresAt": "2021-01-01",
                      "membershipAssignedAt": "2021-01-01",
                      "createdAt": "2021-01-01",
                      "updatedAt": "2021-01-01"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a membership tag of a member",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/remove-membership": {
      "post": {
        "operationId": "MembersController_removeMembership",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The ID of the user you want to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "userId": {
                  "value": {
                    "userId": "665fcba87c55e682ca14c126"
                  },
                  "summary": "userId"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The membership tag removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Membership tag removed successfully"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove a membership tag from a member",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/search-members": {
      "get": {
        "operationId": "MembersController_searchMembers",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "required": false,
            "name": "ignoreLimit",
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "clubId": {
                            "type": "string"
                          },
                          "isHidden": {
                            "type": "boolean"
                          },
                          "role": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "answers": {
                            "type": "array"
                          },
                          "membershipTitle": {
                            "type": "string"
                          },
                          "membershipTag": {
                            "type": "string"
                          },
                          "membershipExpiresAt": {
                            "type": "string"
                          },
                          "membershipAssignedAt": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "number"
                    },
                    "pageCount": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    },
                    "limit": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search for members in a club",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/delete-member": {
      "post": {
        "operationId": "MembersController_deleteMember",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The ID of the user you want to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "userId": {
                  "value": {
                    "userId": "665fcba87c55e682ca14c126"
                  },
                  "summary": "userId"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The member deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Member deleted successfully"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a member from a club",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/add-member-to-staff": {
      "post": {
        "operationId": "MembersController_addMemberToStaff",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemberToStaffDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member added to staff successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "update.success",
                    "data": {
                      "_id": "665fcba87c55e682ca14c126",
                      "userId": "665fcba87c55e682ca14c126",
                      "clubId": "665fcba87c55e682ca14c126",
                      "role": "staff",
                      "membershipTitle": "Club Manager"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Staff limit reached",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "club.staff.limit.reached",
                    "isI18nMessage": true
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Club or member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add a member to club staff",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/remove-member-from-staff": {
      "post": {
        "operationId": "MembersController_removeMemberFromStaff",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMemberFromStaffDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member removed from staff successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "update.success",
                    "data": {
                      "_id": "665fcba87c55e682ca14c126",
                      "userId": "665fcba87c55e682ca14c126",
                      "clubId": "665fcba87c55e682ca14c126",
                      "role": "follower",
                      "membershipTitle": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Club, member, or user club role not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove a member from club staff",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/update-member-roles": {
      "post": {
        "operationId": "MembersController_updateMemberRoles",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "665fcba87c55e682ca14c126",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberRolesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member roles updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "update.success",
                    "data": {
                      "_id": "665fcba87c55e682ca14c126",
                      "userId": "665fcba87c55e682ca14c126",
                      "clubId": "665fcba87c55e682ca14c126"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Club, member, or user club role not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update member roles in the club",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/reset-member-role": {
      "post": {
        "operationId": "MembersController_resetMemberRole",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member roles reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "update.success"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "User club role not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reset member roles to default",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/can-add-staff": {
      "get": {
        "operationId": "MembersController_canAddStaffMember",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The ID of the club",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns whether the club can add more staff members",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "canAdd": true,
                      "currentCount": 5,
                      "maxAllowed": 10
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check if the club can add more staff members",
        "tags": [
          "Club Members"
        ]
      }
    },
    "/clubs/{clubId}/contact": {
      "post": {
        "description": "Creates new contact information for a club, including location, email, phone numbers, and social media contacts. Only authorized users (admin, club owner, or content publishing officer) can create this information.",
        "operationId": "ContactUsController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club for which to create contact information",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to create club contact information",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "placeId": {
                    "type": "string",
                    "example": "ChIJN1t_tDeuEmsRUsoyG83frY4",
                    "description": "Google Places ID for the location"
                  },
                  "placeName": {
                    "type": "string",
                    "example": "Dubai Sports Club",
                    "description": "Name of the place/location"
                  },
                  "geopoint": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number",
                        "example": 25.276987
                      },
                      "lng": {
                        "type": "number",
                        "example": 55.296249
                      }
                    },
                    "description": "Geographic coordinates of the location"
                  },
                  "geohash": {
                    "type": "string",
                    "example": "sv8wzvy0ehjt",
                    "description": "Geohash representation of the coordinates"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "contact@dubaisportsclub.com",
                    "description": "Contact email address"
                  },
                  "phone1": {
                    "type": "string",
                    "example": "+971 4 123 4567",
                    "description": "Primary phone number"
                  },
                  "phone2": {
                    "type": "string",
                    "example": "+971 4 765 4321",
                    "description": "Secondary phone number (optional)"
                  },
                  "mobile": {
                    "type": "string",
                    "example": "+971 50 123 4567",
                    "description": "Mobile phone number"
                  },
                  "smsMobile": {
                    "type": "string",
                    "example": "+971 50 123 4567",
                    "description": "SMS mobile number"
                  },
                  "whatsappMobile": {
                    "type": "string",
                    "example": "+971 50 123 4567",
                    "description": "WhatsApp mobile number"
                  },
                  "isBranch": {
                    "type": "boolean",
                    "example": false,
                    "description": "Whether this is a branch location"
                  }
                },
                "required": [
                  "placeName",
                  "geopoint"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact information created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "placeId": {
                      "type": "string",
                      "example": "ChIJN1t_tDeuEmsRUsoyG83frY4"
                    },
                    "placeName": {
                      "type": "string",
                      "example": "Dubai Sports Club"
                    },
                    "geopoint": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number",
                          "example": 25.276987
                        },
                        "lng": {
                          "type": "number",
                          "example": 55.296249
                        }
                      }
                    },
                    "geohash": {
                      "type": "string",
                      "example": "sv8wzvy0ehjt"
                    },
                    "email": {
                      "type": "string",
                      "example": "contact@dubaisportsclub.com"
                    },
                    "phone1": {
                      "type": "string",
                      "example": "+971 4 123 4567"
                    },
                    "phone2": {
                      "type": "string",
                      "example": "+971 4 765 4321"
                    },
                    "mobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "smsMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "whatsappMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "isBranch": {
                      "type": "boolean",
                      "example": false
                    },
                    "createdBy": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c87"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or club already has contact information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Contact information already exists for this club"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to manage the Contact Us section",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You do not have permission to access this content"
                          },
                          "param": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Club not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create contact information for a club",
        "tags": [
          "Club Contact Information"
        ]
      },
      "get": {
        "description": "Retrieves the contact information for a specific club. This endpoint is publicly accessible.",
        "operationId": "ContactUsController_findByClubId",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club for which to retrieve contact information",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "placeId": {
                      "type": "string",
                      "example": "ChIJN1t_tDeuEmsRUsoyG83frY4"
                    },
                    "placeName": {
                      "type": "string",
                      "example": "Dubai Sports Club"
                    },
                    "geopoint": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number",
                          "example": 25.276987
                        },
                        "lng": {
                          "type": "number",
                          "example": 55.296249
                        }
                      }
                    },
                    "geohash": {
                      "type": "string",
                      "example": "sv8wzvy0ehjt"
                    },
                    "email": {
                      "type": "string",
                      "example": "contact@dubaisportsclub.com"
                    },
                    "phone1": {
                      "type": "string",
                      "example": "+971 4 123 4567"
                    },
                    "phone2": {
                      "type": "string",
                      "example": "+971 4 765 4321"
                    },
                    "mobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "smsMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "whatsappMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "isBranch": {
                      "type": "boolean",
                      "example": false
                    },
                    "createdBy": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "60d21b4667d0d8992e610c87"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "image": {
                          "type": "object",
                          "properties": {
                            "original": {
                              "type": "object"
                            },
                            "thumbnail": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid club ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid club ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact information not found for this club",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Contact information not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get contact information for a club",
        "tags": [
          "Club Contact Information"
        ]
      }
    },
    "/clubs/contact/{id}": {
      "get": {
        "description": "Retrieves contact information by its unique identifier. This endpoint is publicly accessible.",
        "operationId": "ContactUsController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the contact information",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "placeId": {
                      "type": "string",
                      "example": "ChIJN1t_tDeuEmsRUsoyG83frY4"
                    },
                    "placeName": {
                      "type": "string",
                      "example": "Dubai Sports Club"
                    },
                    "geopoint": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number",
                          "example": 25.276987
                        },
                        "lng": {
                          "type": "number",
                          "example": 55.296249
                        }
                      }
                    },
                    "geohash": {
                      "type": "string",
                      "example": "sv8wzvy0ehjt"
                    },
                    "email": {
                      "type": "string",
                      "example": "contact@dubaisportsclub.com"
                    },
                    "phone1": {
                      "type": "string",
                      "example": "+971 4 123 4567"
                    },
                    "phone2": {
                      "type": "string",
                      "example": "+971 4 765 4321"
                    },
                    "mobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "smsMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "whatsappMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "isBranch": {
                      "type": "boolean",
                      "example": false
                    },
                    "createdBy": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "60d21b4667d0d8992e610c87"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "image": {
                          "type": "object",
                          "properties": {
                            "original": {
                              "type": "object"
                            },
                            "thumbnail": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid contact information ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid contact information ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact information not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Contact information not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get contact information by ID",
        "tags": [
          "Club Contact Information"
        ]
      },
      "put": {
        "description": "Updates existing contact information by its unique identifier. Only authorized users (admin, club owner, or content publishing officer) can update this information.",
        "operationId": "ContactUsController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the contact information to update",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to update club contact information",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "placeId": {
                    "type": "string",
                    "example": "ChIJN1t_tDeuEmsRUsoyG83frY4",
                    "description": "Google Places ID for the location"
                  },
                  "placeName": {
                    "type": "string",
                    "example": "Dubai Sports Club - Main Branch",
                    "description": "Name of the place/location"
                  },
                  "geopoint": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number",
                        "example": 25.276987
                      },
                      "lng": {
                        "type": "number",
                        "example": 55.296249
                      }
                    },
                    "description": "Geographic coordinates of the location"
                  },
                  "geohash": {
                    "type": "string",
                    "example": "sv8wzvy0ehjt",
                    "description": "Geohash representation of the coordinates"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "info@dubaisportsclub.com",
                    "description": "Contact email address"
                  },
                  "phone1": {
                    "type": "string",
                    "example": "+971 4 123 4567",
                    "description": "Primary phone number"
                  },
                  "phone2": {
                    "type": "string",
                    "example": "+971 4 765 4321",
                    "description": "Secondary phone number (optional)"
                  },
                  "mobile": {
                    "type": "string",
                    "example": "+971 50 123 4567",
                    "description": "Mobile phone number"
                  },
                  "smsMobile": {
                    "type": "string",
                    "example": "+971 50 123 4567",
                    "description": "SMS mobile number"
                  },
                  "whatsappMobile": {
                    "type": "string",
                    "example": "+971 50 123 4567",
                    "description": "WhatsApp mobile number"
                  },
                  "isBranch": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether this is a branch location"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact information updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "placeId": {
                      "type": "string",
                      "example": "ChIJN1t_tDeuEmsRUsoyG83frY4"
                    },
                    "placeName": {
                      "type": "string",
                      "example": "Dubai Sports Club - Main Branch"
                    },
                    "geopoint": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number",
                          "example": 25.276987
                        },
                        "lng": {
                          "type": "number",
                          "example": 55.296249
                        }
                      }
                    },
                    "geohash": {
                      "type": "string",
                      "example": "sv8wzvy0ehjt"
                    },
                    "email": {
                      "type": "string",
                      "example": "info@dubaisportsclub.com"
                    },
                    "phone1": {
                      "type": "string",
                      "example": "+971 4 123 4567"
                    },
                    "phone2": {
                      "type": "string",
                      "example": "+971 4 765 4321"
                    },
                    "mobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "smsMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "whatsappMobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "isBranch": {
                      "type": "boolean",
                      "example": true
                    },
                    "createdBy": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c87"
                    },
                    "updatedBy": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c87"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T11:45:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or contact information ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid contact information ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to manage the Contact Us section",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You do not have permission to access this content"
                          },
                          "param": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact information not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Contact information not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update contact information",
        "tags": [
          "Club Contact Information"
        ]
      },
      "delete": {
        "description": "Deletes contact information by its unique identifier. Only authorized users (admin, club owner, or content publishing officer) can delete this information.",
        "operationId": "ContactUsController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the contact information to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "placeId": {
                      "type": "string",
                      "example": "ChIJN1t_tDeuEmsRUsoyG83frY4"
                    },
                    "placeName": {
                      "type": "string",
                      "example": "Dubai Sports Club"
                    },
                    "geopoint": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number",
                          "example": 25.276987
                        },
                        "lng": {
                          "type": "number",
                          "example": 55.296249
                        }
                      }
                    },
                    "geohash": {
                      "type": "string",
                      "example": "sv8wzvy0ehjt"
                    },
                    "email": {
                      "type": "string",
                      "example": "contact@dubaisportsclub.com"
                    },
                    "phone1": {
                      "type": "string",
                      "example": "+971 4 123 4567"
                    },
                    "mobile": {
                      "type": "string",
                      "example": "+971 50 123 4567"
                    },
                    "createdBy": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c87"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid contact information ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid contact information ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to manage the Contact Us section",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You do not have permission to access this content"
                          },
                          "param": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact information not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Contact information not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete contact information",
        "tags": [
          "Club Contact Information"
        ]
      }
    },
    "/clubs/{clubId}/about": {
      "post": {
        "description": "Creates a new about section for a club with rich HTML content. Only authorized users (admin, club owner, or content publishing officer) can create this content.",
        "operationId": "AboutClubController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club for which to create the about section",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to create a club about section",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAboutClubDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "About section created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "60d21b4667d0d8992e610c86",
                    "club": "60d21b4667d0d8992e610c85",
                    "body": "<h1>About Our Club</h1><p>Founded in 2020, our club aims to provide a space for sports enthusiasts...</p>",
                    "createdBy": "60d21b4667d0d8992e610c87",
                    "createdAt": "2023-08-15T10:30:00.000Z",
                    "updatedAt": "2023-08-15T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Body content is required",
                        "param": "body"
                      },
                      {
                        "message": "Invalid club ID format",
                        "param": "clubId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to manage the About Us section",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "You are not allowed to access this resource"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Not Found",
                        "param": "clubId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - About section already exists for this club",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "About section already exists for this club",
                        "param": "clubId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create about section for a club",
        "tags": [
          "Club About Section"
        ]
      },
      "get": {
        "description": "Retrieves the about section for a specific club. This endpoint is publicly accessible.",
        "operationId": "AboutClubController_findByClubId",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club for which to retrieve the about section",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "About section retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "60d21b4667d0d8992e610c86",
                    "club": "60d21b4667d0d8992e610c85",
                    "body": "<h1>About Our Club</h1><p>Founded in 2020, our club aims to provide a space for sports enthusiasts...</p>",
                    "createdBy": "60d21b4667d0d8992e610c87",
                    "createdAt": "2023-08-15T10:30:00.000Z",
                    "updatedAt": "2023-08-15T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid club ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid club ID format",
                        "param": "clubId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "About section for this club not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Not Found",
                        "param": "clubId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get about section for a club",
        "tags": [
          "Club About Section"
        ]
      },
      "put": {
        "description": "Updates the about section for a specific club. If no about section exists, a new one will be created. Only authorized users (admin, club owner, or content publishing officer) can update this content.",
        "operationId": "AboutClubController_updateByClubId",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club for which to update the about section",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to update a club about section",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAboutClubDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "About section updated or created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "60d21b4667d0d8992e610c86",
                    "club": "60d21b4667d0d8992e610c85",
                    "body": "<h1>Updated About Our Club</h1><p>Founded in 2020, our club has grown to serve the community with various sports activities...</p>",
                    "createdBy": "60d21b4667d0d8992e610c87",
                    "updatedBy": "60d21b4667d0d8992e610c87",
                    "createdAt": "2023-08-15T10:30:00.000Z",
                    "updatedAt": "2023-08-15T11:45:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or club ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Body content is required",
                        "param": "body"
                      },
                      {
                        "message": "Invalid club ID format",
                        "param": "clubId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to manage the About Us section",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "You are not allowed to access this resource"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Not Found",
                        "param": "clubId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update about section for a club (creates if not exists)",
        "tags": [
          "Club About Section"
        ]
      }
    },
    "/clubs/about/{id}": {
      "get": {
        "description": "Retrieves an about section by its unique identifier. This endpoint is publicly accessible.",
        "operationId": "AboutClubController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the about section",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "About section retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "60d21b4667d0d8992e610c86",
                    "club": "60d21b4667d0d8992e610c85",
                    "body": "<h1>About Our Club</h1><p>Founded in 2020, our club aims to provide a space for sports enthusiasts...</p>",
                    "createdBy": "60d21b4667d0d8992e610c87",
                    "createdAt": "2023-08-15T10:30:00.000Z",
                    "updatedAt": "2023-08-15T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid about section ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid about section ID format",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "About section not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Not Found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get about section by ID",
        "tags": [
          "Club About Section"
        ]
      },
      "put": {
        "description": "Updates an existing about section by its unique identifier. Only authorized users (admin, club owner, or content publishing officer) can update this content.",
        "operationId": "AboutClubController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the about section to update",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to update a club about section",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAboutClubDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "About section updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "60d21b4667d0d8992e610c86",
                    "club": "60d21b4667d0d8992e610c85",
                    "body": "<h1>Updated About Our Club</h1><p>Founded in 2020, our club has grown to serve the community with various sports activities...</p>",
                    "createdBy": "60d21b4667d0d8992e610c87",
                    "updatedBy": "60d21b4667d0d8992e610c87",
                    "createdAt": "2023-08-15T10:30:00.000Z",
                    "updatedAt": "2023-08-15T11:45:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or about section ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Body content is required",
                        "param": "body"
                      },
                      {
                        "message": "Invalid about section ID format",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to manage the About Us section",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "You are not allowed to access this resource"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "About section not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Not Found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update about section by ID",
        "tags": [
          "Club About Section"
        ]
      },
      "delete": {
        "description": "Deletes an about section by its unique identifier. Only authorized users (admin, club owner, or content publishing officer) can delete this content.",
        "operationId": "AboutClubController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the about section to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "About section deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "60d21b4667d0d8992e610c86",
                    "club": "60d21b4667d0d8992e610c85",
                    "body": "<h1>About Our Club</h1><p>Founded in 2020, our club aims to provide a space for sports enthusiasts...</p>",
                    "createdBy": "60d21b4667d0d8992e610c87",
                    "createdAt": "2023-08-15T10:30:00.000Z",
                    "updatedAt": "2023-08-15T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid about section ID format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Invalid about section ID format",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Unauthorized"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to manage the About Us section",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "You are not allowed to access this resource"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "About section not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Not Found",
                        "param": "id"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "errors": [
                      {
                        "message": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete about section",
        "tags": [
          "Club About Section"
        ]
      }
    },
    "/clubs/{clubId}/features": {
      "post": {
        "description": "Creates a new feature with optional icon and images. Only authorized users can create features.",
        "operationId": "FeatureController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to create a feature",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "object",
                    "properties": {
                      "en": {
                        "type": "string",
                        "example": "Our Facilities"
                      },
                      "ar": {
                        "type": "string",
                        "example": "مرافقنا"
                      }
                    },
                    "required": [
                      "en",
                      "ar"
                    ]
                  },
                  "body": {
                    "type": "string",
                    "example": "<p>Our club offers state-of-the-art facilities...</p>"
                  },
                  "viewLang": {
                    "type": "string",
                    "example": "en",
                    "description": "Default view language"
                  },
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "Feature icon (optional)"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Feature images (optional, max 10)"
                  },
                  "links": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "https://example.com/facilities"
                    ],
                    "description": "External links (optional)"
                  }
                },
                "required": [
                  "title",
                  "body"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feature created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "title": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Our Facilities"
                        },
                        "ar": {
                          "type": "string",
                          "example": "مرافقنا"
                        }
                      }
                    },
                    "body": {
                      "type": "string",
                      "example": "<p>Our club offers state-of-the-art facilities...</p>"
                    },
                    "viewLang": {
                      "type": "string",
                      "example": "en"
                    },
                    "icon": {
                      "type": "object",
                      "properties": {
                        "original": {
                          "type": "object"
                        },
                        "thumbnail": {
                          "type": "object"
                        },
                        "medium": {
                          "type": "object"
                        }
                      }
                    },
                    "images": {
                      "type": "array"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "createdBy": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c87"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Club not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You do not have permission to access this content"
                          },
                          "param": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Club not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new feature for a club",
        "tags": [
          "Club Features"
        ]
      },
      "get": {
        "description": "Retrieves all features associated with a specific club.",
        "operationId": "FeatureController_findByClubId",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Features retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c86"
                      },
                      "club": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c85"
                      },
                      "title": {
                        "type": "object",
                        "properties": {
                          "en": {
                            "type": "string",
                            "example": "Our Facilities"
                          },
                          "ar": {
                            "type": "string",
                            "example": "مرافقنا"
                          }
                        }
                      },
                      "body": {
                        "type": "string",
                        "example": "<p>Our club offers state-of-the-art facilities...</p>"
                      },
                      "viewLang": {
                        "type": "string",
                        "example": "en"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2023-08-15T10:30:00.000Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2023-08-15T10:30:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid club ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid club ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Club not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "clubId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all features for a club",
        "tags": [
          "Club Features"
        ]
      }
    },
    "/clubs/{clubId}/features/{id}": {
      "get": {
        "description": "Retrieves a specific feature by its unique identifier.",
        "operationId": "FeatureController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the feature",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "title": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Our Facilities"
                        },
                        "ar": {
                          "type": "string",
                          "example": "مرافقنا"
                        }
                      }
                    },
                    "body": {
                      "type": "string",
                      "example": "<p>Our club offers state-of-the-art facilities...</p>"
                    },
                    "viewLang": {
                      "type": "string",
                      "example": "en"
                    },
                    "icon": {
                      "type": "object",
                      "properties": {
                        "original": {
                          "type": "object"
                        },
                        "thumbnail": {
                          "type": "object"
                        },
                        "medium": {
                          "type": "object"
                        }
                      }
                    },
                    "images": {
                      "type": "array"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "createdBy": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c87"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid feature or club ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid feature ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Feature does not belong to this club",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Feature does not belong to this club"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Feature not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Feature not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a feature by ID",
        "tags": [
          "Club Features"
        ]
      },
      "put": {
        "description": "Updates an existing feature with optional icon and images. Only authorized users can update features.",
        "operationId": "FeatureController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the feature to update",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to update a feature",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "object",
                    "properties": {
                      "en": {
                        "type": "string",
                        "example": "Updated Facilities"
                      },
                      "ar": {
                        "type": "string",
                        "example": "المرافق المحدثة"
                      }
                    }
                  },
                  "body": {
                    "type": "string",
                    "example": "<p>Updated description of our facilities...</p>"
                  },
                  "viewLang": {
                    "type": "string",
                    "example": "ar",
                    "description": "Default view language"
                  },
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "Feature icon (optional)"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Feature images (optional, max 10)"
                  },
                  "links": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "https://example.com/updated-facilities"
                    ],
                    "description": "External links (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feature updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "club": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "title": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Updated Facilities"
                        },
                        "ar": {
                          "type": "string",
                          "example": "المرافق المحدثة"
                        }
                      }
                    },
                    "body": {
                      "type": "string",
                      "example": "<p>Updated description of our facilities...</p>"
                    },
                    "updatedBy": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c87"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-15T11:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid feature ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions or feature does not belong to club",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Feature does not belong to this club"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Feature not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Feature not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update a feature",
        "tags": [
          "Club Features"
        ]
      },
      "delete": {
        "description": "Deletes a feature by its unique identifier. Only authorized users can delete features.",
        "operationId": "FeatureController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the feature to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the club",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Feature deleted successfully"
          },
          "400": {
            "description": "Bad request - Invalid feature or club ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid feature ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions or feature does not belong to club",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Feature does not belong to this club"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Feature not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Feature not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete a feature",
        "tags": [
          "Club Features"
        ]
      }
    },
    "/clubs/{clubId}/features/{id}/images": {
      "post": {
        "description": "Adds a new image to a feature. The image will be added to the feature's images array.",
        "operationId": "FeatureController_addImage",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddImageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image added successfully"
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Add an image to a feature",
        "tags": [
          "Club Features"
        ]
      },
      "delete": {
        "description": "Removes an image from a feature's images array by its index.",
        "operationId": "FeatureController_removeImage",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveImageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image removed successfully"
          },
          "400": {
            "description": "Bad request - Invalid image index"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Remove an image from a feature",
        "tags": [
          "Club Features"
        ]
      }
    },
    "/clubs/{clubId}/features/{id}/links": {
      "post": {
        "description": "Adds a new external link to a feature. The link will be added to the feature's links array.",
        "operationId": "FeatureController_addLink",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLinkDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Link added successfully"
          },
          "400": {
            "description": "Bad request - Link already exists"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Add a link to a feature",
        "tags": [
          "Club Features"
        ]
      },
      "delete": {
        "description": "Removes a link from a feature's links array.",
        "operationId": "FeatureController_removeLink",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveLinkDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Link removed successfully"
          },
          "400": {
            "description": "Bad request - Link does not exist"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Remove a link from a feature",
        "tags": [
          "Club Features"
        ]
      }
    },
    "/cards": {
      "post": {
        "description": "Creates a new card with the provided information. Supports file upload for card image.",
        "operationId": "CardController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to create a card",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "object",
                    "properties": {
                      "en": {
                        "type": "string",
                        "example": "Card Title"
                      },
                      "ar": {
                        "type": "string",
                        "example": "عنوان البطاقة"
                      }
                    },
                    "required": [
                      "en",
                      "ar"
                    ]
                  },
                  "subTitle": {
                    "type": "object",
                    "properties": {
                      "en": {
                        "type": "string",
                        "example": "Card Subtitle"
                      },
                      "ar": {
                        "type": "string",
                        "example": "عنوان فرعي للبطاقة"
                      }
                    },
                    "required": [
                      "en",
                      "ar"
                    ]
                  },
                  "type": {
                    "type": "number",
                    "example": 1,
                    "description": "Card type"
                  },
                  "parentCard": {
                    "type": "string",
                    "example": "60d21b4667d0d8992e610c85",
                    "description": "Parent card ID (optional)"
                  },
                  "featureId": {
                    "type": "string",
                    "example": "60d21b4667d0d8992e610c86",
                    "description": "Feature ID (optional)"
                  },
                  "articleId": {
                    "type": "string",
                    "example": "article123",
                    "description": "Article ID (optional)"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Card image (optional)"
                  }
                },
                "required": [
                  "title",
                  "subTitle"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "title": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Card Title"
                        },
                        "ar": {
                          "type": "string",
                          "example": "عنوان البطاقة"
                        }
                      }
                    },
                    "subTitle": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Card Subtitle"
                        },
                        "ar": {
                          "type": "string",
                          "example": "عنوان فرعي للبطاقة"
                        }
                      }
                    },
                    "type": {
                      "type": "number",
                      "example": 1
                    },
                    "image": {
                      "type": "string",
                      "example": "https://example.com/image.jpg"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Parent card not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "parentCard"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You do not have permission to access this content"
                          },
                          "param": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Parent card or feature not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Parent card not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "parentCard"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new card",
        "tags": [
          "Club Cards"
        ]
      },
      "get": {
        "description": "Retrieves all cards in the system",
        "operationId": "CardController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cards retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c85"
                      },
                      "title": {
                        "type": "object",
                        "properties": {
                          "en": {
                            "type": "string",
                            "example": "Card Title"
                          },
                          "ar": {
                            "type": "string",
                            "example": "عنوان البطاقة"
                          }
                        }
                      },
                      "subTitle": {
                        "type": "object",
                        "properties": {
                          "en": {
                            "type": "string",
                            "example": "Card Subtitle"
                          },
                          "ar": {
                            "type": "string",
                            "example": "عنوان فرعي للبطاقة"
                          }
                        }
                      },
                      "type": {
                        "type": "number",
                        "example": 1
                      },
                      "image": {
                        "type": "string",
                        "example": "https://example.com/image.jpg"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2023-01-01T00:00:00.000Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2023-01-01T00:00:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all cards",
        "tags": [
          "Club Cards"
        ]
      }
    },
    "/cards/hierarchy": {
      "get": {
        "description": "Retrieves card hierarchy, optionally starting from a specified parent card",
        "operationId": "CardController_getHierarchy",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "query",
            "description": "ID of the parent card to start hierarchy from (optional)",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card hierarchy retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c85"
                      },
                      "title": {
                        "type": "object",
                        "properties": {
                          "en": {
                            "type": "string",
                            "example": "Parent Card"
                          },
                          "ar": {
                            "type": "string",
                            "example": "البطاقة الأساسية"
                          }
                        }
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "60d21b4667d0d8992e610c86"
                            },
                            "title": {
                              "type": "object",
                              "properties": {
                                "en": {
                                  "type": "string",
                                  "example": "Child Card"
                                },
                                "ar": {
                                  "type": "string",
                                  "example": "البطاقة الفرعية"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parent card ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid card ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "parentId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Parent card not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Parent card not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "parentId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get card hierarchy",
        "tags": [
          "Club Cards"
        ]
      }
    },
    "/cards/feature/{featureId}": {
      "get": {
        "description": "Retrieves all cards associated with a specific feature",
        "operationId": "CardController_findByFeatureId",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "description": "ID of the feature",
            "schema": {
              "example": "60d21b4667d0d8992e610c86",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cards retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c85"
                      },
                      "title": {
                        "type": "object",
                        "properties": {
                          "en": {
                            "type": "string",
                            "example": "Feature Card"
                          },
                          "ar": {
                            "type": "string",
                            "example": "بطاقة الميزة"
                          }
                        }
                      },
                      "featureId": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c86"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid feature ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid feature ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "featureId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get cards by feature ID",
        "tags": [
          "Club Cards"
        ]
      }
    },
    "/cards/{id}": {
      "get": {
        "description": "Retrieves a specific card by its ID",
        "operationId": "CardController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the card to retrieve",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "title": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Card Title"
                        },
                        "ar": {
                          "type": "string",
                          "example": "عنوان البطاقة"
                        }
                      }
                    },
                    "subTitle": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Card Subtitle"
                        },
                        "ar": {
                          "type": "string",
                          "example": "عنوان فرعي للبطاقة"
                        }
                      }
                    },
                    "type": {
                      "type": "number",
                      "example": 1
                    },
                    "image": {
                      "type": "string",
                      "example": "https://example.com/image.jpg"
                    },
                    "parentCard": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c84"
                    },
                    "featureId": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c86"
                    },
                    "articleId": {
                      "type": "string",
                      "example": "article123"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid card ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid card ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Card not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get card by ID",
        "tags": [
          "Club Cards"
        ]
      },
      "put": {
        "description": "Updates an existing card with the provided information. Supports file upload for card image.",
        "operationId": "CardController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the card to update",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data needed to update a card",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "object",
                    "properties": {
                      "en": {
                        "type": "string",
                        "example": "Updated Card Title"
                      },
                      "ar": {
                        "type": "string",
                        "example": "عنوان البطاقة المحدث"
                      }
                    }
                  },
                  "subTitle": {
                    "type": "object",
                    "properties": {
                      "en": {
                        "type": "string",
                        "example": "Updated Card Subtitle"
                      },
                      "ar": {
                        "type": "string",
                        "example": "عنوان فرعي محدث للبطاقة"
                      }
                    }
                  },
                  "type": {
                    "type": "number",
                    "example": 2,
                    "description": "Card type"
                  },
                  "parentCard": {
                    "type": "string",
                    "example": "60d21b4667d0d8992e610c85",
                    "description": "Parent card ID (optional)"
                  },
                  "featureId": {
                    "type": "string",
                    "example": "60d21b4667d0d8992e610c86",
                    "description": "Feature ID (optional)"
                  },
                  "articleId": {
                    "type": "string",
                    "example": "article456",
                    "description": "Article ID (optional)"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Card image (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "title": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Updated Card Title"
                        },
                        "ar": {
                          "type": "string",
                          "example": "عنوان البطاقة المحدث"
                        }
                      }
                    },
                    "subTitle": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Updated Card Subtitle"
                        },
                        "ar": {
                          "type": "string",
                          "example": "عنوان فرعي محدث للبطاقة"
                        }
                      }
                    },
                    "type": {
                      "type": "number",
                      "example": 2
                    },
                    "image": {
                      "type": "string",
                      "example": "https://example.com/updated-image.jpg"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-01-01T01:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data, circular reference, or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "A card cannot be its own parent"
                          },
                          "param": {
                            "type": "string",
                            "example": "parentCard"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You do not have permission to access this content"
                          },
                          "param": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Card, parent card, or feature not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Card not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update a card",
        "tags": [
          "Club Cards"
        ]
      },
      "delete": {
        "description": "Deletes a card by its ID. If the card has children, their parentCard reference will be set to null.",
        "operationId": "CardController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the card to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d21b4667d0d8992e610c85"
                    },
                    "title": {
                      "type": "object",
                      "properties": {
                        "en": {
                          "type": "string",
                          "example": "Deleted Card Title"
                        },
                        "ar": {
                          "type": "string",
                          "example": "عنوان البطاقة المحذوفة"
                        }
                      }
                    },
                    "deletedAt": {
                      "type": "string",
                      "example": "2023-01-01T02:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid card ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Invalid card ID"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You are not authorized to access this resource"
                          },
                          "param": {
                            "type": "string",
                            "example": "authorization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "You do not have permission to access this content"
                          },
                          "param": {
                            "type": "string",
                            "example": "permission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Card not found"
                          },
                          "param": {
                            "type": "string",
                            "example": "id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Internal server error"
                          },
                          "param": {
                            "type": "string",
                            "example": "server"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete a card",
        "tags": [
          "Club Cards"
        ]
      }
    },
    "/user-activities": {
      "get": {
        "operationId": "UserActivitiesController_getAllActivities",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get all user activities with pagination",
        "tags": [
          "User Activities"
        ]
      }
    },
    "/clubs/{clubId}/articles": {
      "post": {
        "operationId": "ArticlesController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club to create article for",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateArticleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "News item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleAndNewsResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new news item",
        "tags": [
          "Articles"
        ]
      },
      "get": {
        "operationId": "ArticlesController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "createdBy",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of articles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleAndNewsListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all articles for a club",
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/articles/pending-deletions": {
      "get": {
        "operationId": "ArticlesController_getPendingDeletions",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of articles pending deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleAndNewsListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all articles pending deletion",
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/articles/published": {
      "get": {
        "operationId": "ArticlesController_getPublishedArticles",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of published articles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleAndNewsListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all published articles",
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/articles/{id}": {
      "get": {
        "operationId": "ArticlesController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrapperArticleResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific article by ID",
        "tags": [
          "Articles"
        ]
      },
      "patch": {
        "operationId": "ArticlesController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/articles/{id}/request": {
      "delete": {
        "operationId": "ArticlesController_requestDeletion",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article deletion requested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Request deletion of an article",
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/articles/{id}/approve-deletion": {
      "post": {
        "operationId": "ArticlesController_approveDeletion",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article deletion approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve deletion of an article",
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/articles/{id}/reject-deletion": {
      "post": {
        "operationId": "ArticlesController_rejectDeletion",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article deletion rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject deletion of an article",
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/articles/{id}/publish": {
      "patch": {
        "operationId": "ArticlesController_publishArticle",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the article to publish/unpublish",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club the article belongs to",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish or unpublish an article",
        "tags": [
          "Articles"
        ]
      }
    },
    "/clubs/{clubId}/news": {
      "post": {
        "operationId": "NewsController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club to create news for",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateArticleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "News item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleAndNewsResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new news item",
        "tags": [
          "News"
        ]
      },
      "get": {
        "operationId": "NewsController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "createdBy",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of news items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleAndNewsListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all news items for a club",
        "tags": [
          "News"
        ]
      }
    },
    "/clubs/{clubId}/news/pending-deletions": {
      "get": {
        "operationId": "NewsController_getPendingDeletions",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of news items pending deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get news items pending deletion",
        "tags": [
          "News"
        ]
      }
    },
    "/clubs/{clubId}/news/published": {
      "get": {
        "operationId": "NewsController_getPublishedNews",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of published news items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all published news items",
        "tags": [
          "News"
        ]
      }
    },
    "/clubs/{clubId}/news/{id}": {
      "get": {
        "operationId": "NewsController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the news item to retrieve",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "News item details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedArticleDtoResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "News not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific news item by ID",
        "tags": [
          "News"
        ]
      },
      "patch": {
        "operationId": "NewsController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the news item to update",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "News item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleAndNewsResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "News not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a news item",
        "tags": [
          "News"
        ]
      }
    },
    "/clubs/{clubId}/news/{id}/request": {
      "delete": {
        "operationId": "NewsController_requestDeletion",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the news item to request deletion for",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "News not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Request deletion of a news item",
        "tags": [
          "News"
        ]
      }
    },
    "/clubs/{clubId}/news/{id}/approve-deletion": {
      "post": {
        "operationId": "NewsController_approveDeletion",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the news item to approve deletion for",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "News not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve deletion of a news item",
        "tags": [
          "News"
        ]
      }
    },
    "/clubs/{clubId}/news/{id}/reject-deletion": {
      "post": {
        "operationId": "NewsController_rejectDeletion",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the news item to reject deletion for",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion rejection successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "News not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject deletion of a news item",
        "tags": [
          "News"
        ]
      }
    },
    "/clubs/{clubId}/news/{id}/publish": {
      "patch": {
        "operationId": "NewsController_publishNews",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the news item to publish/unpublish",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club the news item belongs to",
            "schema": {
              "example": "682cbc3ae725507d9429b84e",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "News item published/unpublished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "News not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish or unpublish a news item",
        "tags": [
          "News"
        ]
      }
    },
    "/plans": {
      "get": {
        "operationId": "PlansController_findAllPlans",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all active plans",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all plans",
        "tags": [
          "Plans"
        ]
      },
      "post": {
        "operationId": "PlansController_createPlan",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The plan has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new plan",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/{id}": {
      "get": {
        "operationId": "PlansController_findPlanById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedPlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a plan by ID",
        "tags": [
          "Plans"
        ]
      },
      "put": {
        "operationId": "PlansController_updatePlan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The plan has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedPlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a plan",
        "tags": [
          "Plans"
        ]
      },
      "delete": {
        "operationId": "PlansController_deletePlan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The plan has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedPlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a plan",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/augmentations": {
      "post": {
        "operationId": "PlansController_createAugmentationRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAugmentationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The augmentation request has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedPlanAugmentationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Request a feature augmentation for a club",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/augmentations/{id}/approve": {
      "put": {
        "operationId": "PlansController_approveAugmentation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The augmentation has been approved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedPlanAugmentationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Augmentation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve an augmentation request",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/augmentations/{id}/reject": {
      "put": {
        "operationId": "PlansController_rejectAugmentation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The augmentation has been rejected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedPlanAugmentationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Augmentation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject an augmentation request",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/club/{clubId}/augmentations": {
      "get": {
        "operationId": "PlansController_getClubAugmentations",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all augmentations for the club",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlanAugmentationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all augmentations for a club",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/club/{clubId}/effective-limits": {
      "get": {
        "operationId": "PlansController_getEffectiveLimits",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the effective limits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedFeatureUsageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Club or plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get effective limits for a club",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/clubs/{clubId}/features/{featureType}/usage": {
      "get": {
        "operationId": "PlansController_getFeatureUsage",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature usage details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedFeatureUsageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Usage not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get usage of a specific feature for a club",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/clubs/{clubId}/features/{featureType}/increment": {
      "post": {
        "operationId": "PlansController_incrementFeatureUsage",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated feature usage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedFeatureUsageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Increment usage of a specific feature for a club",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/clubs/{clubId}/initialize-usage": {
      "post": {
        "operationId": "PlansController_initializeFeatureUsage",
        "parameters": [
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature usage initialized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedMessageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Initialize or update feature usage for a club",
        "tags": [
          "Plans"
        ]
      }
    },
    "/events/{clubId}/create": {
      "post": {
        "operationId": "EventsController_create",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Event created successfully",
                    "data": {
                      "id": "66528abc962c5aeaa0c70fff",
                      "clubId": "662a12bc862d1a1b1a87abcd",
                      "title": "New Event Title",
                      "description": "Description of the new event",
                      "startDateTime": "2025-06-01T10:00:00.000Z",
                      "endDateTime": "2025-06-01T12:00:00.000Z",
                      "recurringStartDate": "2025-05-15T08:00:00.000Z",
                      "recurringEndDate": "2025-05-15T08:00:00.000Z",
                      "recurringOption": "2025-05-15T08:00:00.000Z",
                      "isLive": false,
                      "color": "#4287f5",
                      "accessType": "GUEST",
                      "eventType": "ONLINE",
                      "meetingLink": "https://zoom.us/j/1234567890",
                      "locationDescription": "Main conference hall, 3rd floor",
                      "locationMapUrl": "https://maps.google.com/?q=location",
                      "createdBy": "662a12bc862d1a1b1a87abce",
                      "updatedBy": "662a12bc862d1a1b1a87abce",
                      "createdAt": "2025-05-15T08:00:00.000Z",
                      "updatedAt": "2025-05-15T08:00:00.000Z"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{eventId}": {
      "patch": {
        "operationId": "EventsController_updateEvent",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "description": "ID of the event to update",
            "schema": {
              "example": "66528abc962c5aeaa0c70fff",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Event updated successfully",
                    "data": {
                      "id": "66528abc962c5aeaa0c70fff",
                      "clubId": "662a12bc862d1a1b1a87abcd",
                      "title": "Updated Event Title",
                      "description": "This is the updated description of the event",
                      "startDateTime": "2025-05-25T10:00:00.000Z",
                      "endDateTime": "2025-05-25T12:00:00.000Z",
                      "recurringStartDate": "2025-06-01T00:00:00.000Z",
                      "recurringEndDate": "2025-07-01T00:00:00.000Z",
                      "recurringOption": "weekly",
                      "isLive": false,
                      "color": "#ff5733",
                      "accessType": "GUEST",
                      "eventType": "ONLINE",
                      "meetingLink": "https://zoom.us/j/1234567890",
                      "locationDescription": "Main conference hall, 3rd floor",
                      "locationMapUrl": "https://maps.google.com/?q=location",
                      "createdBy": "662a12bc862d1a1b1a87abce",
                      "updatedBy": "662a12bc862d1a1b1a87abcf",
                      "createdAt": "2025-04-01T10:00:00.000Z",
                      "updatedAt": "2025-04-15T15:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, for example if endDateTime is before startDateTime",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "The end date cannot be before the start date."
                        },
                        "param": {
                          "type": "string",
                          "example": "endDateTime"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Event not found."
                        },
                        "param": {
                          "type": "string",
                          "example": "eventId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an event by its ID",
        "tags": [
          "Events"
        ]
      },
      "delete": {
        "operationId": "EventsController_deleteEvent",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "description": "ID of the event to delete",
            "schema": {
              "example": "66528abc962c5aeaa0c70fff",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Event deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Event not found."
                        },
                        "param": {
                          "type": "string",
                          "example": "eventId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an event by its ID",
        "tags": [
          "Events"
        ]
      },
      "get": {
        "operationId": "EventsController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "description": "The ID of the event ",
            "schema": {
              "example": "665260fd962c5aeaa0c70b13",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "id": "66528abc962c5aeaa0c70fff",
                      "clubId": "662a12bc862d1a1b1a87abcd",
                      "title": "New Event Title",
                      "description": "Description of the new event",
                      "startDateTime": "2025-06-01T10:00:00.000Z",
                      "endDateTime": "2025-06-01T12:00:00.000Z",
                      "recurringStartDate": "2025-05-15T08:00:00.000Z",
                      "recurringEndDate": "2025-05-15T08:00:00.000Z",
                      "recurringOption": "2025-05-15T08:00:00.000Z",
                      "isLive": false,
                      "color": "#4287f5",
                      "accessType": "GUEST",
                      "eventType": "ONLINE",
                      "meetingLink": "https://zoom.us/j/1234567890",
                      "locationDescription": "Main conference hall, 3rd floor",
                      "locationMapUrl": "https://maps.google.com/?q=location",
                      "createdBy": "662a12bc862d1a1b1a87abce",
                      "updatedBy": "662a12bc862d1a1b1a87abce",
                      "createdAt": "2025-05-15T08:00:00.000Z",
                      "updatedAt": "2025-05-15T08:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Event not found."
                        },
                        "param": {
                          "type": "string",
                          "example": "eventId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Find one event by event id",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{clubId}/upcoming": {
      "get": {
        "operationId": "EventsController_findAllUpcomingEvents",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          },
          {
            "name": "endDateTime",
            "required": false,
            "in": "query",
            "description": "End of date range filter (ISO format)",
            "schema": {
              "example": "2025-06-30T23:59:59.999Z"
            }
          },
          {
            "name": "startDateTime",
            "required": false,
            "in": "query",
            "description": "Start of date range filter (ISO format)",
            "schema": {
              "example": "2025-06-01T00:00:00.000Z"
            }
          },
          {
            "name": "eventType",
            "required": false,
            "in": "query",
            "description": "Filter by event type",
            "schema": {
              "example": "ONLINE"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "If true, returns all results without pagination",
            "schema": {
              "example": false
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results per page",
            "schema": {
              "example": 10
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upcoming events (can be filtered by date range and event type)",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": "66528abc962c5aeaa0c70fff",
                        "clubId": "662a12bc862d1a1b1a87abcd",
                        "title": "New Event Title",
                        "description": "Description of the new event",
                        "startDateTime": "2025-06-01T10:00:00.000Z",
                        "endDateTime": "2025-06-01T12:00:00.000Z",
                        "recurringStartDate": "2025-05-15T08:00:00.000Z",
                        "recurringEndDate": "2025-05-15T08:00:00.000Z",
                        "recurringOption": "2025-05-15T08:00:00.000Z",
                        "isLive": false,
                        "color": "#4287f5",
                        "accessType": "GUEST",
                        "eventType": "ONLINE",
                        "meetingLink": "https://zoom.us/j/1234567890",
                        "locationDescription": "Main conference hall, 3rd floor",
                        "locationMapUrl": "https://maps.google.com/?q=location",
                        "createdBy": "662a12bc862d1a1b1a87abce",
                        "updatedBy": "662a12bc862d1a1b1a87abce",
                        "createdAt": "2025-05-15T08:00:00.000Z",
                        "updatedAt": "2025-05-15T08:00:00.000Z"
                      }
                    ],
                    "pageCount": 1,
                    "totalCount": 1,
                    "page": 1,
                    "limit": 10
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get upcoming events by club ID with optional filters",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{clubId}": {
      "get": {
        "operationId": "EventsController_findAllEvents",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventType",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "66528abc962c5aeaa0c70fff"
                          },
                          "clubId": {
                            "type": "string",
                            "example": "662a12bc862d1a1b1a87abcd"
                          },
                          "title": {
                            "type": "string",
                            "example": "New Event Title"
                          },
                          "description": {
                            "type": "string",
                            "example": "Description of the new event"
                          },
                          "startDateTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-06-01T10:00:00.000Z"
                          },
                          "endDateTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-06-01T12:00:00.000Z"
                          },
                          "recurringStartDate": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-05-15T08:00:00.000Z"
                          },
                          "recurringEndDate": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-05-15T08:00:00.000Z"
                          },
                          "recurringOption": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-05-15T08:00:00.000Z"
                          },
                          "isLive": {
                            "type": "boolean",
                            "example": false
                          },
                          "color": {
                            "type": "string",
                            "example": "#4287f5"
                          },
                          "accessType": {
                            "type": "string",
                            "example": "GUEST"
                          },
                          "eventType": {
                            "type": "string",
                            "example": "ONLINE"
                          },
                          "meetingLink": {
                            "type": "string",
                            "example": "https://zoom.us/j/1234567890"
                          },
                          "locationDescription": {
                            "type": "string",
                            "example": "Main conference hall, 3rd floor"
                          },
                          "locationMapUrl": {
                            "type": "string",
                            "example": "https://maps.google.com/?q=location"
                          },
                          "createdBy": {
                            "type": "string",
                            "example": "662a12bc862d1a1b1a87abce"
                          },
                          "updatedBy": {
                            "type": "string",
                            "example": "662a12bc862d1a1b1a87abce"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-05-15T08:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-05-15T08:00:00.000Z"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "number",
                      "example": 30
                    },
                    "pageCount": {
                      "type": "number",
                      "example": 1
                    },
                    "page": {
                      "type": "number",
                      "example": 1
                    },
                    "limit": {
                      "type": "number",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "You are not authorized to access this resource"
                        },
                        "param": {
                          "type": "string",
                          "example": "clubId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all events by club ID",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{clubId}/search": {
      "get": {
        "operationId": "EventsController_searchEvents",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "ID of the club",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          },
          {
            "name": "q",
            "required": true,
            "in": "query",
            "description": "Search term (event title)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit of results per page",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "description": "Set to true to return all results",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events matching the search term (or empty array if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": "66528abc962c5aeaa0c70fff",
                        "clubId": "662a12bc862d1a1b1a87abcd",
                        "title": "New Event Title",
                        "description": "Description of the new event",
                        "startDateTime": "2025-06-01T10:00:00.000Z",
                        "endDateTime": "2025-06-01T12:00:00.000Z",
                        "recurringStartDate": "2025-05-15T08:00:00.000Z",
                        "recurringEndDate": "2025-05-15T08:00:00.000Z",
                        "recurringOption": "2025-05-15T08:00:00.000Z",
                        "isLive": false,
                        "color": "#4287f5",
                        "accessType": "GUEST",
                        "eventType": "ONLINE",
                        "meetingLink": "https://zoom.us/j/1234567890",
                        "locationDescription": "Main conference hall, 3rd floor",
                        "locationMapUrl": "https://maps.google.com/?q=location",
                        "createdBy": "662a12bc862d1a1b1a87abce",
                        "updatedBy": "662a12bc862d1a1b1a87abce",
                        "createdAt": "2025-05-15T08:00:00.000Z",
                        "updatedAt": "2025-05-15T08:00:00.000Z"
                      }
                    ],
                    "totalCount": 1,
                    "pageCount": 1,
                    "page": 1,
                    "limit": 10
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search events by title in a specific club",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{eventId}/interest": {
      "post": {
        "operationId": "EventsController_makeInterestInEvent",
        "parameters": [
          {
            "name": "accept-language",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "description": "The ID of the event to express interest in",
            "schema": {
              "example": "665260fd962c5aeaa0c70b13",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MakeInterestInEventDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interest has been recorded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "_id": "66528abc962c5aeaa0c70fff",
                      "userId": "66526fff962c5aeaa0c70bbb",
                      "eventId": "665260fd962c5aeaa0c70b13",
                      "clubId": "507f1f77bcf86cd799439011",
                      "isGoing": true,
                      "isAddedToCalendar": true,
                      "reminderOption": "1 hour before",
                      "reminderLabel": "Don’t miss the event!",
                      "remindAt": "2025-05-25T11:00:00.000Z",
                      "isCalendarReadOnly": false,
                      "calendarAccountName": "rahma.calendar@gmail.com",
                      "calendarOwnerName": "Rahma Ramadan"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Event not found."
                        },
                        "param": {
                          "type": "string",
                          "example": "eventId"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Express interest in an event",
        "tags": [
          "Events"
        ]
      }
    },
    "/comments/{type}/{itemId}": {
      "post": {
        "operationId": "CommentsController_createComment",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Comment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Item not found or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Comments"
        ]
      },
      "get": {
        "operationId": "CommentsController_getComments",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsArrayResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Item not found or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/comments/{commentId}": {
      "put": {
        "operationId": "CommentsController_editComment",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the comment to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated comment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update this comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Comment not found or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Comments"
        ]
      },
      "delete": {
        "operationId": "CommentsController_deleteComment",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the comment to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentBasicResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete this comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Comment not found or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/comments/replies/{commentId}": {
      "get": {
        "operationId": "CommentsController_getReplies",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the parent comment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Replies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsArrayResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Comment not found or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/comments/{type}/{itemId}/count": {
      "get": {
        "operationId": "CommentsController_countCommentsByItem",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentCountResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Item not found or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/likes/{type}/{itemId}": {
      "post": {
        "operationId": "LikesController_addLike",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item to like",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reactionType",
            "required": false,
            "in": "query",
            "description": "Type of reaction",
            "schema": {
              "enum": [
                "like",
                "love",
                "haha",
                "wow",
                "sad",
                "angry"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Like added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikeCreateResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Likes"
        ]
      },
      "delete": {
        "operationId": "LikesController_removeLike",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item to unlike",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Like removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikeCreateResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Like not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Likes"
        ]
      },
      "get": {
        "operationId": "LikesController_getLikesByItem",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Likes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikesArrayResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - No likes found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Likes"
        ]
      }
    },
    "/likes/{type}/{itemId}/count": {
      "get": {
        "operationId": "LikesController_countLikesByItem",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Like count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikeCountResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Likes"
        ]
      }
    },
    "/likes/{type}/{itemId}/reactions": {
      "get": {
        "operationId": "LikesController_getReactionCounts",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID of the item",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction counts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReactionCountsResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Likes"
        ]
      }
    },
    "/favorites/user": {
      "get": {
        "operationId": "FavoritesController_getUserFavorites",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {}
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "User favorites retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoritesArrayResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - No favorites found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Favorites"
        ]
      }
    },
    "/favorites/{clubId}/{type}/{itemId}": {
      "post": {
        "operationId": "FavoritesController_addFavorite",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Item type (news, article)",
            "schema": {
              "enum": [
                "news",
                "article",
                "album",
                "media"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Item ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": true,
            "in": "path",
            "description": "Club ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Item or club not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Favorites"
        ]
      }
    },
    "/favorites/{favoriteId}": {
      "delete": {
        "operationId": "FavoritesController_removeFavorite",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "favoriteId",
            "required": true,
            "in": "path",
            "description": "Favorite ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Favorite not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Favorites"
        ]
      }
    },
    "/notifications/topics": {
      "get": {
        "description": "Retrieves a list of all available notification topics in the system. Requires system role permissions.",
        "operationId": "NotificationController_getAllTopics",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all topics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponseDtoArrayResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read topics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all topics",
        "tags": [
          "notifications"
        ]
      },
      "post": {
        "description": "Creates a new notification topic in the system. Requires system role permissions.",
        "operationId": "NotificationController_createTopic",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Topic created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or topic name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create topics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new topic",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/topics/{name}": {
      "get": {
        "description": "Retrieves details of a specific notification topic by its name. Requires system role permissions.",
        "operationId": "NotificationController_getTopicByName",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Name of the topic to retrieve",
            "schema": {
              "example": "club-announcements",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Topic details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponseDtoResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read topics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Topic not found - The requested topic does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get topic by name",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/{topic}/subscribe": {
      "post": {
        "description": "Subscribes the current user to a notification topic to receive notifications from that topic.",
        "operationId": "NotificationController_subscribeToTopic",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "required": true,
            "in": "path",
            "description": "Name of the topic to subscribe to",
            "schema": {
              "example": "club-announcements",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devices subscribed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid FCM tokens provided or other validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Topic not found - The requested topic does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Subscribe devices to a topic",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/{topic}/unsubscribe": {
      "post": {
        "description": "Unsubscribes the current user from a notification topic to stop receiving notifications from that topic.",
        "operationId": "NotificationController_unsubscribeFromTopic",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "required": true,
            "in": "path",
            "description": "Name of the topic to unsubscribe from",
            "schema": {
              "example": "club-announcements",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devices unsubscribed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid FCM tokens provided or other validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Topic not found - The requested topic does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unsubscribe devices from a topic",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/my": {
      "get": {
        "description": "Retrieves a paginated list of notifications for the currently authenticated user.",
        "operationId": "NotificationDeliveryController_getMyNotifications",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of notifications to return",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of notifications to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of notifications successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationItemDtoArrayResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get notifications for the authenticated user",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/unread/count": {
      "get": {
        "description": "Returns the total number of unread notifications for the currently authenticated user.",
        "operationId": "NotificationDeliveryController_getMyUnreadCount",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns count of unread notifications successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountDtoResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get count of unread notifications for the authenticated user",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/read/{id}": {
      "patch": {
        "description": "Updates a specific notification to mark it as read for the authenticated user.",
        "operationId": "NotificationDeliveryController_markAsRead",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the notification to mark as read",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid notification ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Notification with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark a notification as read",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/read/all": {
      "patch": {
        "description": "Updates all unread notifications to mark them as read for the authenticated user.",
        "operationId": "NotificationDeliveryController_markAllAsRead",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid notification ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have access to this notification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark all notifications as read",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/delete/{id}": {
      "patch": {
        "description": "Deletes a specific notification for the authenticated user.",
        "operationId": "NotificationDeliveryController_deleteNotification",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the notification to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid notification ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have access to this notification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Notification with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a notification",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/delete/bulk": {
      "patch": {
        "description": "Deletes multiple notifications for the authenticated user.",
        "operationId": "NotificationDeliveryController_deleteBulkNotifications",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid notification IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have access to one or more notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - One or more notifications do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete multiple notifications",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notification-preferences": {
      "get": {
        "description": "Retrieves the current notification preferences for the authenticated user.",
        "operationId": "NotificationPreferencesController_getUserPreferences",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user notification preferences successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user notification preferences",
        "tags": [
          "notification-preferences"
        ]
      }
    },
    "/notification-preferences/default-channels": {
      "patch": {
        "description": "Updates the default notification channels (email, push, in-app) for the authenticated user.",
        "operationId": "NotificationPreferencesController_updateDefaultChannels",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultChannelsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default channels updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultChannelsDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update default channel preferences",
        "tags": [
          "notification-preferences"
        ]
      }
    },
    "/notification-preferences/quiet-hours": {
      "patch": {
        "description": "Updates the quiet hours settings when the user does not want to receive notifications.",
        "operationId": "NotificationPreferencesController_updateQuietHours",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuietHoursDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quiet hours updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuietHoursDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update quiet hours settings",
        "tags": [
          "notification-preferences"
        ]
      }
    },
    "/notification-preferences/privacy": {
      "patch": {
        "description": "Updates the privacy settings for notifications, controlling who can see user activity.",
        "operationId": "NotificationPreferencesController_updatePrivacySettings",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacySettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Privacy settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacySettingsDtoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update privacy settings",
        "tags": [
          "notification-preferences"
        ]
      }
    },
    "/notification-preferences/reset": {
      "post": {
        "description": "Resets all notification preferences to their default values for the authenticated user.",
        "operationId": "NotificationPreferencesController_resetToDefault",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preferences reset to default successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reset notification preferences to default",
        "tags": [
          "notification-preferences"
        ]
      }
    },
    "/albums": {
      "post": {
        "description": "Creates a new album with optional base image. Requires CREATE_ALBUM permission.",
        "operationId": "AlbumsController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlbumDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Album created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedAlbumResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create albums",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Album with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "File too large - Maximum 5MB allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTooLargeErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new album",
        "tags": [
          "Albums"
        ]
      },
      "get": {
        "description": "Retrieves a paginated list of all albums. Supports filtering and sorting.",
        "operationId": "AlbumsController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {
              "default": 20,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "ignoreLimit",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "accessType",
            "required": false,
            "in": "query",
            "description": "Album access type",
            "schema": {
              "example": "guest",
              "type": "string",
              "enum": [
                "guest",
                "follower",
                "community",
                "staff"
              ]
            }
          },
          {
            "name": "clubId",
            "required": false,
            "in": "query",
            "description": "Club ID",
            "schema": {
              "example": "507f1f77bcf86cd799439013",
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Whether to include soft deleted albums",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Albums retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAlbumsResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read albums",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get all albums",
        "tags": [
          "Albums"
        ]
      }
    },
    "/albums/{id}": {
      "get": {
        "description": "Retrieves a specific album by its ID. Access is controlled by album permissions.",
        "operationId": "AlbumsController_findOne",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Album ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Album retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedAlbumResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid album ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No access to this album",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Album not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get album by ID",
        "tags": [
          "Albums"
        ]
      },
      "put": {
        "description": "Updates an existing album. Can update metadata and base image. Requires UPDATE_ALBUM permission.",
        "operationId": "AlbumsController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Album ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlbumDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Album updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedAlbumResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update this album",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Album not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Album name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "File too large - Maximum 5MB allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTooLargeErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update album",
        "tags": [
          "Albums"
        ]
      },
      "delete": {
        "description": "Soft deletes an album. The album will be marked as deleted but not permanently removed. Requires DELETE_ALBUM permission.",
        "operationId": "AlbumsController_remove",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Album ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Album deleted successfully - No Content"
          },
          "400": {
            "description": "Invalid album ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete this album",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Album not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Album cannot be deleted (has dependencies)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete album",
        "tags": [
          "Albums"
        ]
      }
    },
    "/albums/{albumId}/media": {
      "post": {
        "description": "Uploads multiple media files (images/videos) to an album. Supports JPG, PNG, MP4, and MOV formats. Maximum 30 files per upload, 100MB per file.",
        "operationId": "MediaController_uploadMedia",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "albumId",
            "required": true,
            "in": "path",
            "description": "Album ID to upload media to",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateMediaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Media uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "File validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to upload media to this album",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPermissionErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Album not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "File too large - Maximum 100MB per file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaUploadErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unsupported file type or format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaValidationErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Upload media to album",
        "tags": [
          "Media"
        ]
      },
      "get": {
        "description": "Retrieves all media items from a specific album with pagination support",
        "operationId": "MediaController_findByAlbumId",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "albumId",
            "required": true,
            "in": "path",
            "description": "Album ID to get media from",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "createdAt"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by media type",
            "schema": {
              "enum": [
                "image",
                "video",
                "document"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 20)",
            "schema": {
              "example": 20
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Album media retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMediaResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid album ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to view media in this album",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Album not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get album media",
        "tags": [
          "Media"
        ]
      }
    },
    "/albums/{albumId}/media/{id}": {
      "delete": {
        "description": "Deletes a specific media item from an album. Only the uploader or album admin can delete media.",
        "operationId": "MediaController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "Language preference (ar/en)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Media ID to delete",
            "schema": {
              "example": "507f1f77bcf86cd799439014",
              "type": "string"
            }
          },
          {
            "name": "albumId",
            "required": true,
            "in": "path",
            "description": "Album ID containing the media",
            "schema": {
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Media deleted successfully - No Content"
          },
          "400": {
            "description": "Invalid media ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete this media",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Media not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaNotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Media cannot be deleted (dependencies exist)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete media",
        "tags": [
          "Media"
        ]
      }
    },
    "/sub-categories": {
      "get": {
        "operationId": "SubCategoriesController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "query",
            "description": "Filter by parent category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sub-categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategoriesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read sub-categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Sub-category with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all active sub-categories with pagination",
        "tags": [
          "Sub Categories"
        ]
      },
      "post": {
        "operationId": "SubCategoriesController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sub-category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create sub-categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Sub-category with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new sub-category",
        "tags": [
          "Sub Categories"
        ]
      }
    },
    "/sub-categories/admin": {
      "get": {
        "operationId": "SubCategoriesController_findAllAdmin",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "query",
            "description": "Filter by parent category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sub-categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategoriesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read sub-categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Sub-category with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all sub-categories (admin) with pagination",
        "tags": [
          "Sub Categories"
        ]
      }
    },
    "/sub-categories/{id}": {
      "get": {
        "operationId": "SubCategoriesController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "685dcbd6a0736b231ec2e5bb",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          },
          "default": {
            "description": "Sub-category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategoryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a sub-category by id",
        "tags": [
          "Sub Categories"
        ]
      },
      "patch": {
        "operationId": "SubCategoriesController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "685dcbd6a0736b231ec2e5bb",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sub-category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a sub-category by id",
        "tags": [
          "Sub Categories"
        ]
      },
      "delete": {
        "operationId": "SubCategoriesController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "685dcbd6a0736b231ec2e5bb",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to read roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Role with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a sub-category by id",
        "tags": [
          "Sub Categories"
        ]
      }
    },
    "/settings": {
      "post": {
        "operationId": "SettingsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Settings"
        ]
      },
      "get": {
        "operationId": "SettingsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Settings"
        ]
      }
    },
    "/settings/{id}": {
      "patch": {
        "operationId": "SettingsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Settings"
        ]
      },
      "delete": {
        "operationId": "SettingsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Settings"
        ]
      }
    },
    "/majors": {
      "get": {
        "description": "Retrieves a paginated list of all active majors. Can be filtered by name.",
        "operationId": "MajorsController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "example": "engineering",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of majors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MajorsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all active majors with pagination",
        "tags": [
          "Majors"
        ]
      },
      "post": {
        "description": "Creates a new major with optional icon. Requires appropriate permissions.",
        "operationId": "MajorsController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateMajorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Major created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MajorResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create majors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Major with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "File too large - Maximum 50MB allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTooLargeErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new major",
        "tags": [
          "Majors"
        ]
      }
    },
    "/majors/admin": {
      "get": {
        "description": "Retrieves a paginated list of all majors, including inactive ones. Admin access required.",
        "operationId": "MajorsController_findAllAdmin",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "example": "engineering",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all majors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MajorsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access majors admin data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all majors (admin) with pagination",
        "tags": [
          "Majors"
        ]
      }
    },
    "/majors/{id}": {
      "get": {
        "description": "Retrieves a specific major by its unique identifier.",
        "operationId": "MajorsController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Major ID",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Major retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MajorResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Major with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a major by ID",
        "tags": [
          "Majors"
        ]
      },
      "patch": {
        "description": "Updates an existing major with new data and optional icon. Requires appropriate permissions.",
        "operationId": "MajorsController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Major ID to update",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMajorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Major updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MajorResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed - Invalid input data or ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update majors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Major with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Major with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "File too large - Maximum 50MB allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileTooLargeErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a major by ID",
        "tags": [
          "Majors"
        ]
      },
      "delete": {
        "description": "Permanently removes a major from the system. Requires appropriate permissions.",
        "operationId": "MajorsController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Major ID to delete",
            "schema": {
              "example": "60d21b4667d0d8992e610c85",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Major deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "deleted.successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete majors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Major with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a major by ID",
        "tags": [
          "Majors"
        ]
      }
    },
    "/sub-majors": {
      "get": {
        "operationId": "SubMajorsController_findAll",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "query",
            "description": "Filter by parent major ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sub-majors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubMajorsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - No sub-majors found matching the criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all active sub-majors with pagination",
        "tags": [
          "Sub Majors"
        ]
      },
      "post": {
        "operationId": "SubMajorsController_create",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubMajorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sub-major created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubMajorResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to create sub-majors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new sub-major",
        "tags": [
          "Sub Majors"
        ]
      }
    },
    "/sub-majors/admin": {
      "get": {
        "operationId": "SubMajorsController_findAllAdmin",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "query",
            "description": "Filter by parent major ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all sub-majors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubMajorsResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to access sub-majors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all sub-majors (admin) with pagination",
        "tags": [
          "Sub Majors"
        ]
      }
    },
    "/sub-majors/{id}": {
      "get": {
        "operationId": "SubMajorsController_findById",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "685dcbd6a0736b231ec2e5bf",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sub-major retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubMajorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Sub-major with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a sub-major by ID",
        "tags": [
          "Sub Majors"
        ]
      },
      "patch": {
        "operationId": "SubMajorsController_update",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "685dcbd6a0736b231ec2e5bf",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubMajorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sub-major updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubMajorResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input data or ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to update sub-majors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Sub-major with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a sub-major by ID",
        "tags": [
          "Sub Majors"
        ]
      },
      "delete": {
        "operationId": "SubMajorsController_delete",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "685dcbd6a0736b231ec2e5bf",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sub-major deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sub-major deleted successfully"
                    },
                    "data": {
                      "type": "object",
                      "example": {
                        "id": "682cbc3ae725507d9429b84e"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. JWT token is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to delete sub-majors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Sub-major with specified ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a sub-major by ID",
        "tags": [
          "Sub Majors"
        ]
      }
    },
    "/payment/checkout": {
      "post": {
        "operationId": "PaymentController_checkoutPaymentForm",
        "parameters": [
          {
            "name": "payment",
            "required": true,
            "in": "path",
            "description": "The payment data",
            "schema": {
              "$ref": "#/components/schemas/SchedulePaymentDTO"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchedulePaymentDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Checkout a payment form",
        "tags": [
          "Payment"
        ]
      }
    },
    "/payment/cancel": {
      "post": {
        "operationId": "PaymentController_cancelPayment",
        "parameters": [
          {
            "name": "agreementId",
            "required": true,
            "in": "path",
            "description": "The agreement ID of the payment to cancel",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Cancel a payment request",
        "tags": [
          "Payment"
        ]
      }
    },
    "/feed": {
      "get": {
        "operationId": "FeedController_homeFeed",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeFilterType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "last_week",
                "last_month",
                "last_year"
              ],
              "type": "string"
            }
          },
          {
            "name": "popularityFilterType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "most_engaged",
                "most_viewed"
              ],
              "type": "string"
            }
          },
          {
            "name": "filterType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "all",
                "news",
                "article"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the home feed data including articles, news and events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeFeedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors (e.g. invalid filter type)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Feed"
        ]
      }
    },
    "/feed/{clubId}": {
      "get": {
        "operationId": "FeedController_clubHomeFeed",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clubId",
            "required": false,
            "in": "path",
            "schema": {
              "example": "685c217faf0836b7f36312b7",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeFilterType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "last_week",
                "last_month",
                "last_year"
              ],
              "type": "string"
            }
          },
          {
            "name": "popularityFilterType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "most_engaged",
                "most_viewed"
              ],
              "type": "string"
            }
          },
          {
            "name": "filterType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "all",
                "news",
                "article"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the club home feed data including articles, news, events and club information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClubHomeFeedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors (e.g. missing fields)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Club not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Feed"
        ]
      }
    }
  },
  "info": {
    "title": "Club App API",
    "description": "API documentation for the Club App backend",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "SignUpDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          },
          "birthYear": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "enum": [
              "google",
              "facebook",
              "apple",
              "system"
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "subscriber",
              "admin",
              "superAdmin",
              "super_user",
              "editor"
            ],
            "default": "subscriber"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "FCMToken": {
            "type": "string"
          },
          "guestId": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Profile image file"
          },
          "cover": {
            "type": "string",
            "format": "binary",
            "description": "Cover image file"
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "confirmPassword",
          "birthYear",
          "country",
          "provider",
          "role",
          "deviceId",
          "deviceType"
        ]
      },
      "confirmEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "FCMToken": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "otp",
          "deviceId",
          "deviceType"
        ]
      },
      "SignInDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "StrongPassword123"
          },
          "loginAs": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "guest"
            ],
            "example": "user",
            "description": "Role to login as (user, admin, or guest)"
          },
          "deviceId": {
            "type": "string",
            "description": "Unique device identifier",
            "example": "f582b454-3a8d-4346-8b3a-cf071525ce8f"
          },
          "deviceType": {
            "type": "string",
            "description": "Type of device (iOS, Android, web)",
            "example": "iOS",
            "enum": [
              "iOS",
              "android",
              "web"
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "google",
              "facebook",
              "apple",
              "system"
            ],
            "example": "system",
            "description": "Authentication provider (google, facebook, apple, or system)"
          },
          "FCMToken": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password",
          "loginAs",
          "provider"
        ]
      },
      "SendResetPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "FCMToken": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "otp",
          "deviceId",
          "deviceType",
          "newPassword",
          "confirmPassword"
        ]
      },
      "CreateWithGoogleTokenDto": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "FCMToken": {
            "type": "string"
          },
          "guestId": {
            "type": "string"
          }
        },
        "required": [
          "id_token",
          "deviceId",
          "deviceType"
        ]
      },
      "CreateWithAppleTokenDto": {
        "type": "object",
        "properties": {
          "identityToken": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "guestId": {
            "type": "string"
          }
        },
        "required": [
          "identityToken",
          "deviceId",
          "deviceType"
        ]
      },
      "guestSignIn": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          }
        },
        "required": [
          "deviceId",
          "deviceType"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken",
          "deviceId",
          "deviceType"
        ]
      },
      "UpdateFCMTokenDto": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          },
          "FCMToken": {
            "type": "string"
          }
        },
        "required": [
          "deviceId",
          "FCMToken"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "description": "The username of the user",
            "example": "john.doe"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the user",
            "example": "+201234567890"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "john.doe@example.com"
          },
          "birthYear": {
            "type": "string",
            "description": "The birth year of the user",
            "example": "1990"
          },
          "country": {
            "type": "string",
            "description": "The country of the user",
            "example": "Egypt"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the user",
            "example": "male",
            "enum": [
              "MALE",
              "FEMALE"
            ]
          },
          "major": {
            "type": "string",
            "description": "The major of the user",
            "example": "Computer Science"
          },
          "subMajor": {
            "type": "string",
            "description": "The sub major of the user",
            "example": "Computer Science"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Profile image file"
          },
          "cover": {
            "type": "string",
            "format": "binary",
            "description": "Cover image file"
          },
          "oldPassword": {
            "type": "string",
            "description": "The old password of the user",
            "example": "password"
          },
          "password": {
            "type": "string",
            "description": "The new password of the user",
            "example": "password"
          },
          "confirmPassword": {
            "type": "string",
            "description": "Confirm the new password",
            "example": "password"
          },
          "facebookLink": {
            "type": "string",
            "description": "The facebook link of the user",
            "example": "https://www.facebook.com/john.doe"
          },
          "instagramLink": {
            "type": "string",
            "description": "The instagram link of the user",
            "example": "https://www.instagram.com/john.doe"
          },
          "twitterLink": {
            "type": "string",
            "description": "The twitter link of the user",
            "example": "https://twitter.com/john.doe"
          },
          "whatsappLink": {
            "type": "string",
            "description": "The whatsapp link of the user",
            "example": "https://wa.me/1234567890"
          }
        }
      },
      "ChangeEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email to change to",
            "example": "test@test.com"
          },
          "otp": {
            "type": "string",
            "description": "The OTP to confirm the email",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "otp"
        ]
      },
      "AddCategoryDto": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "The id of the category to add to the user"
          }
        },
        "required": [
          "categoryId"
        ]
      },
      "RemoveCategoryDto": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "The id of the category to add to the user"
          }
        },
        "required": [
          "categoryId"
        ]
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "staff"
          },
          "description": {
            "type": "string",
            "example": "Staff of clubs or system role for the system"
          },
          "permissionsIds": {
            "example": [
              "685dcbd4a0736b231ec2e5ac"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isSystemRole": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "name",
          "description",
          "permissionsIds",
          "isSystemRole"
        ]
      },
      "UpdateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "members"
          },
          "description": {
            "type": "string",
            "example": "Staff of clubs or system role for the system"
          },
          "permissions": {
            "example": [
              "685dcbd4a0736b231ec2e5ad"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isSystemRole": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "ObjectId": {
        "type": "object",
        "properties": {}
      },
      "CreatePermissionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "manage members"
          },
          "actionsIds": {
            "example": [
              "685dcbd4a0736b231ec2e5a4",
              "685dcbd4a0736b231ec2e5a5"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resourceId": {
            "example": "685dcbd4a0736b231ec2e5a6",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          }
        },
        "required": [
          "name",
          "actionsIds",
          "resourceId"
        ]
      },
      "UpdatePermissionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "manage members"
          },
          "actionsIds": {
            "example": [
              "685dcbd4a0736b231ec2e5a7",
              "685dcbd4a0736b231ec2e5a8"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "example": "manage members"
          },
          "resourceId": {
            "example": "685dcbd4a0736b231ec2e5a9",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          }
        }
      },
      "UserClubRoleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "userId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "clubId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "roleIds": {
            "example": [
              "60d21b4667d0d8992e610c85"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "userId",
          "clubId",
          "roleIds",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserClubRoleDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserClubRoleResponse"
          }
        },
        "required": [
          "data"
        ]
      },
      "UserClubRoleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserClubRoleDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "example": 5
          },
          "totalCount": {
            "type": "number",
            "example": 50
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "UnauthorizedErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Unauthorized"
          },
          "error": {
            "type": "string",
            "example": "Unauthorized"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "InternalServerErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          },
          "error": {
            "type": "string",
            "example": "Internal Server Error"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "CreateUserClubRoleDto": {
        "type": "object",
        "properties": {
          "clubId": {
            "type": "string",
            "example": "682cc103ccf73b8a3ce6e585"
          },
          "roleIds": {
            "example": [
              "682cc103ccf73b8a3ce6e585"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userId": {
            "type": "string",
            "example": "682cc103ccf73b8a3ce6e585"
          }
        },
        "required": [
          "clubId",
          "roleIds",
          "userId"
        ]
      },
      "ValidationErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "example": [
              "name must be a string",
              "description must be a string"
            ],
            "description": "Array of validation error messages",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "type": "string",
            "example": "Bad Request"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "ConflictErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 409
          },
          "message": {
            "type": "string",
            "example": "Major with this name already exists"
          },
          "error": {
            "type": "string",
            "example": "Conflict"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "ForbiddenErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "Forbidden resource"
          },
          "error": {
            "type": "string",
            "example": "Forbidden"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "NotFoundErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Resource with id 60d21b4667d0d8992e610c85 not found"
          },
          "error": {
            "type": "string",
            "example": "Not Found"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "UpdateUserClubRoleDto": {
        "type": "object",
        "properties": {
          "clubId": {
            "type": "string",
            "example": "682cc103ccf73b8a3ce6e585"
          },
          "roleIds": {
            "example": [
              "682cc103ccf73b8a3ce6e585"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userId": {
            "type": "string",
            "example": "682cc103ccf73b8a3ce6e585"
          }
        }
      },
      "UserSystemRoleResponseDtos": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "userId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "roleIds": {
            "example": [
              "60d21b4667d0d8992e610c85"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "userId",
          "roleIds",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserSystemRoleDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserSystemRoleResponseDtos"
          }
        },
        "required": [
          "data"
        ]
      },
      "UserSystemRoleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSystemRoleDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "example": 5
          },
          "totalCount": {
            "type": "number",
            "example": 50
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "CreateUserSystemRoleDto": {
        "type": "object",
        "properties": {
          "roleIds": {
            "example": [
              "685dcbd4a0736b231ec2e5b0"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userId": {
            "example": "685dcbd4a0736b231ec2e5b1",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          }
        },
        "required": [
          "roleIds",
          "userId"
        ]
      },
      "UpdateUserSystemRoleDto": {
        "type": "object",
        "properties": {
          "roleIds": {
            "example": [
              "685dcbd4a0736b231ec2e5b2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userId": {
            "example": "685dcbd4a0736b231ec2e5b3",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          }
        },
        "required": [
          "roleIds",
          "userId"
        ]
      },
      "SendPhoneVerificationCode": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "The phone number to send the verification code to",
            "example": "+1234567890"
          }
        },
        "required": [
          "phone"
        ]
      },
      "VerifyPhoneCodeDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "The phone number to verify the code for",
            "example": "+1234567890"
          },
          "otp": {
            "type": "string",
            "description": "The OTP code to verify",
            "example": "123456"
          }
        },
        "required": [
          "phone",
          "otp"
        ]
      },
      "CategoryDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "ar": "Category",
              "en": "Category"
            }
          },
          "name": {
            "type": "string",
            "example": "Category"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "icon": {
            "example": [
              {
                "original": {
                  "url": "https://example.com/image.jpg",
                  "width": 100,
                  "height": 100,
                  "size": 100,
                  "fileType": "image",
                  "mimeType": "image/jpeg"
                },
                "thumbnail": {
                  "url": "https://example.com/image.jpg",
                  "width": 100,
                  "height": 100,
                  "size": 100,
                  "fileType": "image",
                  "mimeType": "image/jpeg"
                }
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "updatedBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "title",
          "name",
          "isActive",
          "icon",
          "createdBy",
          "updatedBy",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "CategoryResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "example": 5
          },
          "totalCount": {
            "type": "number",
            "example": 50
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "ErrorMessageDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Category name is required"
          },
          "param": {
            "type": "string",
            "description": "Parameter that caused the error",
            "example": "name"
          }
        },
        "required": [
          "message",
          "param"
        ]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "en": "English Title",
              "ar": "العنوان العربي"
            }
          },
          "name": {
            "type": "string",
            "example": "category name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          }
        },
        "required": [
          "title",
          "name"
        ]
      },
      "WrapperCategoryDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CategoryDto"
          }
        },
        "required": [
          "data"
        ]
      },
      "FileTooLargeErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 413
          },
          "message": {
            "type": "string",
            "example": "File too large. Maximum size allowed is 50MB"
          },
          "error": {
            "type": "string",
            "example": "Payload Too Large"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "CategoriesResponseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "ar": "Category",
              "en": "Category"
            }
          },
          "name": {
            "type": "string",
            "example": "Category"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "icon": {
            "example": [
              {
                "original": {
                  "url": "https://example.com/image.jpg",
                  "width": 100,
                  "height": 100,
                  "size": 100,
                  "fileType": "image",
                  "mimeType": "image/jpeg"
                },
                "thumbnail": {
                  "url": "https://example.com/image.jpg",
                  "width": 100,
                  "height": 100,
                  "size": 100,
                  "fileType": "image",
                  "mimeType": "image/jpeg"
                }
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "updatedBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDto"
            }
          }
        },
        "required": [
          "title",
          "name",
          "isActive",
          "icon",
          "createdBy",
          "updatedBy",
          "id",
          "createdAt",
          "updatedAt",
          "subCategories"
        ]
      },
      "WarpperCategoryResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoriesResponseDto"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "NotFoundErrorsDto": {
        "type": "object",
        "properties": {
          "errors": {
            "description": "Array of error messages",
            "example": [
              {
                "message": "Category not found",
                "param": "categoryId"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "en": "English Title",
              "ar": "العنوان العربي"
            }
          },
          "name": {
            "type": "string",
            "example": "category name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          }
        }
      },
      "MultiLangStringDto": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "example": "Test Name"
          },
          "ar": {
            "type": "string",
            "example": "اسم تجريبي"
          }
        },
        "required": [
          "en",
          "ar"
        ]
      },
      "CreateClubDTO": {
        "type": "object",
        "properties": {
          "clubName": {
            "$ref": "#/components/schemas/MultiLangStringDto"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLangStringDto"
          },
          "welcomMsg": {
            "type": "string",
            "description": "The welcome message for the club",
            "example": "Welcome to our club!"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Club image file"
          },
          "clubCountry": {
            "type": "string",
            "description": "The country of the club",
            "example": "United States"
          },
          "clubType": {
            "type": "string",
            "description": "The type of the club",
            "example": "Public"
          },
          "officialEmail": {
            "type": "string",
            "description": "The official email of the club",
            "example": "official@club.com"
          },
          "domainLink": {
            "type": "string",
            "description": "The domain link of the club",
            "example": "https://club.com"
          },
          "clubAccessability": {
            "type": "string",
            "description": "The accessibility status of the club",
            "example": "Public"
          },
          "clubPlan": {
            "type": "string",
            "description": "The plan of the club",
            "example": "Free"
          },
          "planId": {
            "type": "object",
            "description": "The plan id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          },
          "categoryId": {
            "type": "object",
            "description": "The category id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          },
          "subCategoryId": {
            "type": "object",
            "description": "The sub category id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          }
        },
        "required": [
          "clubName",
          "description",
          "welcomMsg",
          "clubCountry",
          "clubType",
          "officialEmail",
          "domainLink",
          "clubAccessability",
          "clubPlan",
          "planId",
          "categoryId",
          "subCategoryId"
        ]
      },
      "VerifyOfficialEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "user@example.com"
          },
          "otp": {
            "type": "string",
            "description": "The OTP",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "otp"
        ]
      },
      "TranslatedTextDto": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string"
          },
          "ar": {
            "type": "string"
          }
        },
        "required": [
          "en",
          "ar"
        ]
      },
      "clubResponse": {
        "type": "object",
        "properties": {
          "allowCallingBetweenStaff2Staff": {
            "type": "boolean",
            "example": true
          },
          "allowChattingBetweenFollower2Follower": {
            "type": "boolean",
            "example": false
          },
          "allowChattingBetweenMembers": {
            "type": "boolean",
            "example": true
          },
          "allowChattingBetweenStaff2Follower": {
            "type": "boolean",
            "example": true
          },
          "allowChattingBetweenStaff2Staff": {
            "type": "boolean",
            "example": false
          },
          "allowHiddenMembers": {
            "type": "boolean",
            "example": true
          },
          "allowMembersGroup": {
            "type": "number",
            "example": 5
          },
          "allowedNumberGroup": {
            "type": "number",
            "example": 100
          },
          "requiredJoinRequestAgreement": {
            "type": "boolean",
            "example": true
          },
          "showClubFollowerListForFollower": {
            "type": "boolean",
            "example": true
          },
          "showClubFollowerListForStaff": {
            "type": "boolean",
            "example": true
          },
          "showClubListMembersForAll": {
            "type": "boolean",
            "example": true
          },
          "showClubStaffListForFollower": {
            "type": "boolean",
            "example": false
          },
          "showClubStaffListForStaff": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "allowCallingBetweenStaff2Staff",
          "allowChattingBetweenFollower2Follower",
          "allowChattingBetweenMembers",
          "allowChattingBetweenStaff2Follower",
          "allowChattingBetweenStaff2Staff",
          "allowHiddenMembers",
          "allowMembersGroup",
          "allowedNumberGroup",
          "requiredJoinRequestAgreement",
          "showClubFollowerListForFollower",
          "showClubFollowerListForStaff",
          "showClubListMembersForAll",
          "showClubStaffListForFollower",
          "showClubStaffListForStaff",
          "createdAt",
          "updatedAt"
        ]
      },
      "LabelDto": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string"
          },
          "ar": {
            "type": "string"
          }
        },
        "required": [
          "en",
          "ar"
        ]
      },
      "NavigatorItemDto": {
        "type": "object",
        "properties": {
          "accessType": {
            "type": "number"
          },
          "imagePath": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LabelDto"
          },
          "link": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "position": {
            "type": "number"
          }
        },
        "required": [
          "accessType",
          "imagePath",
          "imageUrl",
          "label",
          "link",
          "isActive",
          "position"
        ]
      },
      "QuestionItemDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "multiple_choice",
              "yes_no"
            ]
          },
          "isRequired": {
            "type": "boolean",
            "example": true
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "question",
          "type",
          "isRequired",
          "options"
        ]
      },
      "ClubResponseDto": {
        "type": "object",
        "properties": {
          "clubName": {
            "$ref": "#/components/schemas/TranslatedTextDto"
          },
          "description": {
            "$ref": "#/components/schemas/TranslatedTextDto"
          },
          "slug": {
            "type": "string"
          },
          "clubType": {
            "type": "string",
            "enum": [
              "official",
              "unofficial"
            ]
          },
          "clubVerified": {
            "type": "boolean",
            "example": true
          },
          "clubCountry": {
            "type": "string"
          },
          "welcomMsg": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "clubAccessability": {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ]
          },
          "clubVisibility": {
            "type": "boolean",
            "example": true
          },
          "clubFollowable": {
            "type": "boolean",
            "example": true
          },
          "clubPlan": {
            "type": "string",
            "enum": [
              "free",
              "premium"
            ]
          },
          "isSubscriptionActive": {
            "type": "boolean",
            "example": true
          },
          "policies": {
            "$ref": "#/components/schemas/clubResponse"
          },
          "navigators": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "groupName": {
            "type": "string"
          },
          "enableJoiningQuestions": {
            "type": "boolean",
            "example": true
          },
          "membersNumber": {
            "type": "number",
            "example": 100
          },
          "hiddenMembersNumber": {
            "type": "number",
            "example": 100
          },
          "joinRequestsNumber": {
            "type": "number",
            "example": 100
          },
          "questionData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionItemDto"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "clubName",
          "description",
          "slug",
          "clubType",
          "clubVerified",
          "clubCountry",
          "welcomMsg",
          "createdBy",
          "clubAccessability",
          "clubVisibility",
          "clubFollowable",
          "clubPlan",
          "isSubscriptionActive",
          "policies",
          "navigators",
          "groupName",
          "enableJoiningQuestions",
          "membersNumber",
          "hiddenMembersNumber",
          "joinRequestsNumber",
          "questionData",
          "createdAt",
          "updatedAt",
          "id"
        ]
      },
      "PaginatedClubResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClubResponseDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 10
          },
          "totalCount": {
            "type": "number",
            "example": 100
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "totalCount"
        ]
      },
      "UpdatePoliciesDto": {
        "type": "object",
        "properties": {
          "allowCallingBetweenStaff2Staff": {
            "type": "boolean",
            "description": "Allows staff members to call each other.",
            "example": true
          },
          "allowChattingBetweenFollower2Follower": {
            "type": "boolean",
            "description": "Allows followers to chat with each other.",
            "example": false
          },
          "allowChattingBetweenMembers": {
            "type": "boolean",
            "description": "Allows club members to chat with each other.",
            "example": true
          },
          "allowChattingBetweenStaff2Follower": {
            "type": "boolean",
            "description": "Allows staff members to chat with followers.",
            "example": true
          },
          "allowChattingBetweenStaff2Staff": {
            "type": "boolean",
            "description": "Allows staff members to chat with each other.",
            "example": false
          },
          "allowHiddenMembers": {
            "type": "boolean",
            "description": "Allows club members to be hidden from public view.",
            "example": true
          },
          "allowMembersGroup": {
            "type": "number",
            "description": "Maximum number of groups a member can join.",
            "example": 5
          },
          "allowedNumberGroup": {
            "type": "number",
            "description": "Maximum number of groups allowed in the club.",
            "example": 100
          },
          "requiredJoinRequestAgreement": {
            "type": "boolean",
            "description": "Requires users to agree to terms before joining.",
            "example": true
          },
          "showClubFollowerListForFollower": {
            "type": "boolean",
            "description": "Allows followers to view the list of other followers.",
            "example": true
          },
          "showClubFollowerListForStaff": {
            "type": "boolean",
            "description": "Allows staff to view the list of followers.",
            "example": true
          },
          "showClubListMembersForAll": {
            "type": "boolean",
            "description": "Allows all users to view the list of club members.",
            "example": true
          },
          "showClubStaffListForFollower": {
            "type": "boolean",
            "description": "Allows followers to view the list of staff members.",
            "example": false
          },
          "showClubStaffListForStaff": {
            "type": "boolean",
            "description": "Allows staff to view the list of other staff members.",
            "example": true
          }
        }
      },
      "clubpoliciesDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/clubResponse"
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateSettingsDto": {
        "type": "object",
        "properties": {
          "officialEmail": {
            "type": "string",
            "description": "The official email of the club",
            "example": "info@clubapp.com"
          },
          "domainLink": {
            "type": "string",
            "description": "The domain of the club",
            "example": "clubapp.com"
          },
          "groupName": {
            "type": "string",
            "description": "The group name",
            "example": "Group 1"
          }
        }
      },
      "clubSettingsResponse": {
        "type": "object",
        "properties": {
          "officialEmail": {
            "type": "string",
            "example": "info@clubapp.com"
          },
          "domainLink": {
            "type": "string",
            "example": "clubapp.com"
          },
          "groupName": {
            "type": "string",
            "example": "Group 1"
          }
        },
        "required": [
          "officialEmail",
          "domainLink",
          "groupName"
        ]
      },
      "clubSettingsDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/clubSettingsResponse"
          }
        },
        "required": [
          "data"
        ]
      },
      "ConfirmOfficialEmailDto": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string",
            "description": "The official email of the club",
            "example": "info@clubapp.com"
          }
        },
        "required": [
          "otp"
        ]
      },
      "clubconfirmEmailResponse": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string",
            "example": "info@clubapp.com"
          }
        },
        "required": [
          "otp"
        ]
      },
      "clubconfirmEmailDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/clubconfirmEmailResponse"
          }
        },
        "required": [
          "data"
        ]
      },
      "NavigatorLabelDto": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "example": "About Us",
            "description": "English label"
          },
          "ar": {
            "type": "string",
            "example": "معلومات عنا",
            "description": "Arabic label"
          }
        }
      },
      "ClubNavigatorEntryDto": {
        "type": "object",
        "properties": {
          "accessType": {
            "type": "number",
            "example": 1,
            "description": "Determines the accessibility of the navigator"
          },
          "imagePath": {
            "type": "string",
            "example": "/images/icons/about.png",
            "description": "Path to the image icon"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://example.com/images/icons/about.png",
            "description": "URL of the image icon"
          },
          "label": {
            "description": "Multilingual label (English and Arabic)",
            "allOf": [
              {
                "$ref": "#/components/schemas/NavigatorLabelDto"
              }
            ]
          },
          "link": {
            "type": "string",
            "example": "/about",
            "description": "Link associated with the navigator"
          },
          "isActive": {
            "type": "boolean",
            "example": false,
            "description": "Indicates whether the navigator is active"
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "Position of the navigator in the navigation menu"
          }
        }
      },
      "ClubNavigatorsDto": {
        "type": "object",
        "properties": {
          "about": {
            "example": {
              "accessType": 1,
              "imagePath": "/images/icons/about.png",
              "imageUrl": "https://example.com/images/icons/about.png",
              "label": {
                "en": "About Us",
                "ar": "معلومات عنا"
              },
              "link": "/about",
              "isActive": false,
              "position": 1
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "articles": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/articles.png",
              "imageUrl": "https://example.com/images/icons/articles.png",
              "label": {
                "en": "Articles",
                "ar": "مقالات"
              },
              "link": "/articles",
              "isActive": false,
              "position": 2
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "events": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/events.png",
              "imageUrl": "https://example.com/images/icons/events.png",
              "label": {
                "en": "Events",
                "ar": "فعاليات"
              },
              "link": "/events",
              "isActive": false,
              "position": 3
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "gallery": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/gallery.png",
              "imageUrl": "https://example.com/images/icons/gallery.png",
              "label": {
                "en": "Gallery",
                "ar": "معرض الصور"
              },
              "link": "/gallery",
              "isActive": false,
              "position": 4
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "interestGroup": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/interest-group.png",
              "imageUrl": "https://example.com/images/icons/interest-group.png",
              "label": {
                "en": "Interest Groups",
                "ar": "مجموعات الاهتمام"
              },
              "link": "/interest-groups",
              "isActive": false,
              "position": 5
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "internalGroup": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/internal-group.png",
              "imageUrl": "https://example.com/images/icons/internal-group.png",
              "label": {
                "en": "Internal Groups",
                "ar": "المجموعات الداخلية"
              },
              "link": "/internal-groups",
              "isActive": false,
              "position": 6
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "massMail": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/mass-mail.png",
              "imageUrl": "https://example.com/images/icons/mass-mail.png",
              "label": {
                "en": "Mass Mail",
                "ar": "البريد الالكتروني"
              },
              "link": "/mass-mail",
              "isActive": false,
              "position": 7
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "members": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/members.png",
              "imageUrl": "https://example.com/images/icons/members.png",
              "label": {
                "en": "Members",
                "ar": "الأعضاء"
              },
              "link": "/members",
              "isActive": false,
              "position": 8
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "messages": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/messages.png",
              "imageUrl": "https://example.com/images/icons/messages.png",
              "label": {
                "en": "Messages",
                "ar": "الرسائل"
              },
              "link": "/messages",
              "isActive": false,
              "position": 9
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "news": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/news.png",
              "imageUrl": "https://example.com/images/icons/news.png",
              "label": {
                "en": "News",
                "ar": "الأخبار"
              },
              "link": "/news",
              "isActive": false,
              "position": 10
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          },
          "servicesGroup": {
            "example": {
              "accessType": 2,
              "imagePath": "/images/icons/services.png",
              "imageUrl": "https://example.com/images/icons/services.png",
              "label": {
                "en": "Services",
                "ar": "الخدمات"
              },
              "link": "/services",
              "isActive": false,
              "position": 11
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ClubNavigatorEntryDto"
              }
            ]
          }
        }
      },
      "ClubNavigatorsResponse": {
        "type": "object",
        "properties": {
          "about": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "articles": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "events": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "gallery": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "interestGroup": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "internalGroup": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "massMail": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "members": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "messages": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "news": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          },
          "servicesGroup": {
            "$ref": "#/components/schemas/NavigatorItemDto"
          }
        },
        "required": [
          "about",
          "articles",
          "events",
          "gallery",
          "interestGroup",
          "internalGroup",
          "massMail",
          "members",
          "messages",
          "news",
          "servicesGroup"
        ]
      },
      "clubNavigatorsDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClubNavigatorsResponse"
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateClubDto": {
        "type": "object",
        "properties": {
          "clubName": {
            "$ref": "#/components/schemas/MultiLangStringDto"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLangStringDto"
          },
          "welcomMsg": {
            "type": "string",
            "description": "The welcome message for the club",
            "example": "Welcome to our club!"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Club image file"
          },
          "clubCountry": {
            "type": "string",
            "description": "The country of the club",
            "example": "United States"
          },
          "clubType": {
            "type": "string",
            "description": "The type of the club",
            "example": "Public"
          },
          "officialEmail": {
            "type": "string",
            "description": "The official email of the club",
            "example": "official@club.com"
          },
          "domainLink": {
            "type": "string",
            "description": "The domain link of the club",
            "example": "https://club.com"
          },
          "clubAccessability": {
            "type": "string",
            "description": "The accessibility status of the club",
            "example": "Public"
          },
          "clubPlan": {
            "type": "string",
            "description": "The plan of the club",
            "example": "Free"
          },
          "planId": {
            "type": "object",
            "description": "The plan id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          },
          "categoryId": {
            "type": "object",
            "description": "The category id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          },
          "subCategoryId": {
            "type": "object",
            "description": "The sub category id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          }
        }
      },
      "CreateJoiningQuestionDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "The question for the joining question",
            "example": "What is your name?"
          },
          "type": {
            "type": "string",
            "description": "The type of the joining question",
            "example": "alphanumeric"
          },
          "isRequired": {
            "type": "boolean",
            "description": "The required status of the joining question",
            "example": true
          },
          "order": {
            "type": "number",
            "description": "The order of the joining question",
            "example": 1
          }
        },
        "required": [
          "question",
          "type",
          "isRequired",
          "order"
        ]
      },
      "DeleteJoiningQuestionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ToggleJoiningQuestionDto": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "The status of the joining question",
            "example": true
          }
        },
        "required": [
          "isEnabled"
        ]
      },
      "UpdateJoiningQuestionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the joining question",
            "example": "123"
          },
          "question": {
            "type": "string",
            "description": "The question of the joining question",
            "example": "What is your name?"
          },
          "type": {
            "type": "string",
            "description": "The type of the joining question",
            "example": "alphanumeric"
          },
          "isRequired": {
            "type": "boolean",
            "description": "The required status of the joining question",
            "example": true
          },
          "order": {
            "type": "number",
            "description": "The order of the joining question",
            "example": 1
          }
        },
        "required": [
          "id",
          "question",
          "type",
          "isRequired",
          "order"
        ]
      },
      "SubmitJoiningAnswersDto": {
        "type": "object",
        "properties": {
          "answers": {
            "description": "The answers to the joining questions",
            "example": [
              {
                "questionId": "123",
                "answer": "John Doe"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "answers"
        ]
      },
      "HandleJoinRequestDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The user id of the user",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          },
          "action": {
            "type": "string",
            "description": "The action to be taken on the join request",
            "example": "accept"
          },
          "rejectedReason": {
            "type": "string",
            "description": "The rejected reason of the join request",
            "example": "The user is not a member of the club"
          }
        },
        "required": [
          "userId",
          "action",
          "rejectedReason"
        ]
      },
      "InviteUsersFromExcelDto": {
        "type": "object",
        "properties": {
          "invitees": {
            "type": "string",
            "format": "binary",
            "description": "Invitees  file"
          }
        },
        "required": [
          "invitees"
        ]
      },
      "SendInvitionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "user@example.com"
          },
          "phone": {
            "type": "string",
            "description": "The phone of the user",
            "example": "+1234567890"
          },
          "label": {
            "type": "string",
            "description": "The label of the user",
            "example": "John Doe"
          }
        },
        "required": [
          "name",
          "email",
          "phone",
          "label"
        ]
      },
      "InvitationResultDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "user@example.com"
          },
          "clubId": {
            "type": "string",
            "description": "The id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          },
          "invitationStatus": {
            "type": "string",
            "description": "The status of the invitation",
            "example": "ACCEPTED"
          }
        },
        "required": [
          "email",
          "clubId",
          "invitationStatus"
        ]
      },
      "RevokeInvitationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "user@example.com"
          },
          "clubId": {
            "type": "string",
            "description": "The id of the club",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          }
        },
        "required": [
          "email",
          "clubId"
        ]
      },
      "VerifyInvitationTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The invitation token",
            "example": "1234567890"
          }
        },
        "required": [
          "token"
        ]
      },
      "AddMembershipTagDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "membershipTitle": {
            "type": "string"
          },
          "membershipTag": {
            "type": "string"
          },
          "membershipExpiresAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "membershipTitle",
          "membershipTag",
          "membershipExpiresAt"
        ]
      },
      "UpdateMembershipTagDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The user id of the user",
            "example": "60a0a0a0a0a0a0a0a0a0a0a0"
          },
          "membershipTitle": {
            "type": "string",
            "description": "The membership title of the user",
            "example": "Member"
          },
          "membershipTag": {
            "type": "string",
            "description": "The membership tag of the user",
            "example": "Member"
          },
          "membershipExpiresAt": {
            "type": "string",
            "description": "The membership expires at of the user",
            "example": "2021-01-01"
          }
        },
        "required": [
          "userId",
          "membershipTitle",
          "membershipTag",
          "membershipExpiresAt"
        ]
      },
      "AddMemberToStaffDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user",
            "example": "665fcba87c55e682ca14c126"
          },
          "title": {
            "type": "string",
            "description": "The title of the user",
            "example": "anythings"
          }
        }
      },
      "RemoveMemberFromStaffDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user",
            "example": "665fcba87c55e682ca14c126"
          }
        }
      },
      "UpdateMemberRolesDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user",
            "example": "665fcba87c55e682ca14c126"
          },
          "roles": {
            "description": "The roles of the user",
            "example": [
              "665fcba87c55e682ca14c126",
              "665fcba87c55e682ca14c126"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateAboutClubDto": {
        "type": "object",
        "properties": {
          "club": {
            "type": "string",
            "description": "ID of the club",
            "example": "60d21b4667d0d8992e610c85"
          },
          "body": {
            "type": "string",
            "description": "HTML content describing the club",
            "example": "<h1>About Our Club</h1><p>Founded in 2020, our club aims to provide a space for sports enthusiasts...</p>"
          }
        },
        "required": [
          "club",
          "body"
        ]
      },
      "UpdateAboutClubDto": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "HTML content describing the club",
            "example": "<h1>About Our Club</h1><p>Founded in 2020, our club aims to provide a space for sports enthusiasts...</p>"
          }
        }
      },
      "AddImageDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Image file to add to the feature"
          }
        },
        "required": [
          "image"
        ]
      },
      "RemoveImageDto": {
        "type": "object",
        "properties": {
          "imageIndex": {
            "type": "number",
            "description": "Index of the image to remove",
            "example": 0
          }
        },
        "required": [
          "imageIndex"
        ]
      },
      "AddLinkDto": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "URL of the link to add",
            "example": "https://example.com/resource"
          },
          "title": {
            "type": "string",
            "description": "Title of the link (optional)",
            "example": "Resource Website"
          }
        },
        "required": [
          "link"
        ]
      },
      "RemoveLinkDto": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "URL of the link to remove",
            "example": "https://example.com/resource"
          }
        },
        "required": [
          "link"
        ]
      },
      "CreateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the article or news item",
            "example": "Club Championship Results 2025",
            "maxLength": 200
          },
          "accessType": {
            "type": "string",
            "description": "Access type of the article",
            "example": "guest",
            "enum": [
              "guest",
              "our community",
              "follower",
              "staff"
            ]
          },
          "content": {
            "type": "string",
            "description": "Content of the article in HTML format",
            "example": "The annual club championship concluded with great success. John Smith took first place in the senior division..."
          },
          "ViewLanguage": {
            "type": "string",
            "description": "Language code of the article content",
            "example": "en"
          },
          "media": {
            "type": "array",
            "description": "Media files for the article",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        },
        "required": [
          "title",
          "accessType",
          "content",
          "ViewLanguage"
        ]
      },
      "MediaPropertiesDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to the media file"
          },
          "width": {
            "type": "number",
            "description": "Width of the media in pixels"
          },
          "height": {
            "type": "number",
            "description": "Height of the media in pixels"
          },
          "size": {
            "type": "number",
            "description": "Size of the media in bytes"
          },
          "fileType": {
            "type": "string",
            "description": "File type of the media"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the media"
          }
        },
        "required": [
          "url",
          "width",
          "height",
          "size"
        ]
      },
      "MediaItemDto": {
        "type": "object",
        "properties": {
          "original": {
            "description": "Original media properties",
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaPropertiesDto"
              }
            ]
          },
          "thumbnail": {
            "description": "Thumbnail properties",
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaPropertiesDto"
              }
            ]
          }
        },
        "required": [
          "original"
        ]
      },
      "ReactionCountsDto": {
        "type": "object",
        "properties": {}
      },
      "LikesDataDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total count of likes"
          },
          "reactions": {
            "description": "Breakdown of reactions by type",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReactionCountsDto"
              }
            ]
          }
        },
        "required": [
          "count",
          "reactions"
        ]
      },
      "CommentsDataDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "EngagementDataDto": {
        "type": "object",
        "properties": {
          "likes": {
            "$ref": "#/components/schemas/LikesDataDto"
          },
          "comments": {
            "$ref": "#/components/schemas/CommentsDataDto"
          }
        },
        "required": [
          "likes",
          "comments"
        ]
      },
      "ArticleAndNewsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the article/news"
          },
          "type": {
            "type": "string",
            "description": "Type of content (article or news)"
          },
          "title": {
            "type": "string",
            "description": "Title of the article/news"
          },
          "content": {
            "type": "string",
            "description": "Content of the article/news in HTML format"
          },
          "accessType": {
            "type": "string",
            "description": "Access type (guest, member, etc.)"
          },
          "ViewLanguage": {
            "type": "string",
            "description": "Language of the content"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the content"
          },
          "updatedBy": {
            "type": "string",
            "description": "ID of the user who last updated the content"
          },
          "clubId": {
            "type": "string",
            "description": "ID of the club the content belongs to"
          },
          "media": {
            "description": "Media files attached to the content",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaItemDto"
            }
          },
          "isPublished": {
            "type": "boolean",
            "description": "Whether the content is published"
          },
          "isIndexed": {
            "type": "boolean",
            "description": "Whether the content is indexed by search engines"
          },
          "isPendingDeletion": {
            "type": "boolean",
            "description": "Whether the content is pending deletion"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Whether the content is deleted"
          },
          "allowComments": {
            "type": "boolean",
            "description": "Whether comments are allowed on this content"
          },
          "viewCount": {
            "type": "number",
            "description": "Number of views for this content"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation date and time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update date and time"
          },
          "publishedAt": {
            "type": "string",
            "description": "Publication date and time"
          },
          "engagement": {
            "description": "Engagement data for the content",
            "allOf": [
              {
                "$ref": "#/components/schemas/EngagementDataDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "type",
          "title",
          "content",
          "accessType",
          "ViewLanguage",
          "createdBy",
          "updatedBy",
          "clubId",
          "media",
          "isPublished",
          "isIndexed",
          "isPendingDeletion",
          "isDeleted",
          "allowComments",
          "viewCount",
          "createdAt",
          "updatedAt",
          "engagement"
        ]
      },
      "ArticleAndNewsResponseDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArticleAndNewsResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "ArticleAndNewsListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of news items with engagement data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleAndNewsResponseDto"
            }
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          }
        },
        "required": [
          "data",
          "totalCount",
          "page",
          "limit",
          "pageCount"
        ]
      },
      "WrapperArticleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Article data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArticleAndNewsResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the article",
            "example": "Article Title"
          },
          "accessType": {
            "type": "string",
            "description": "Access type of the article",
            "example": "staff",
            "enum": [
              "guest",
              "our community",
              "follower",
              "staff"
            ]
          },
          "content": {
            "type": "string",
            "description": "Content of the article",
            "example": "Article Content"
          },
          "ViewLanguage": {
            "type": "string",
            "description": "View language of the article",
            "example": "en"
          },
          "media": {
            "type": "array",
            "description": "Media files for the article",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Response message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "data"
        ]
      },
      "PublishArticleDto": {
        "type": "object",
        "properties": {
          "published": {
            "type": "boolean",
            "description": "Whether the article should be published",
            "example": true
          }
        },
        "required": [
          "published"
        ]
      },
      "EnrichedArticleDto": {
        "type": "object",
        "properties": {
          "article": {
            "description": "Article content data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArticleAndNewsResponseDto"
              }
            ]
          },
          "news": {
            "description": "News content data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArticleAndNewsResponseDto"
              }
            ]
          },
          "engagement": {
            "description": "Engagement data for the content",
            "allOf": [
              {
                "$ref": "#/components/schemas/EngagementDataDto"
              }
            ]
          }
        },
        "required": [
          "engagement"
        ]
      },
      "NewsListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of news items with engagement data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrichedArticleDto"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "EnrichedArticleDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnrichedArticleDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "PlanResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Plan unique identifier",
            "example": "507f1f77bcf86cd799439011"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Premium Plan"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Premium features for clubs"
          },
          "price": {
            "type": "number",
            "description": "Plan price",
            "example": 99.99
          },
          "features": {
            "type": "object",
            "description": "Plan features and limits",
            "example": {
              "maxMembers": 1000,
              "maxEvents": 50,
              "maxAlbums": 100
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the plan is active",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "Plan creation date",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Plan last update date",
            "example": "2024-01-16T14:20:00.000Z"
          }
        },
        "required": [
          "_id",
          "name",
          "description",
          "price",
          "features",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginatedPlanResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of plans",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanResponseDto"
            }
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages",
            "example": 10
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of items",
            "example": 100
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "WrappedPlanResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Plan data",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "ErrorDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid input"
          },
          "param": {
            "type": "string",
            "description": "Error parameter",
            "example": "planId"
          }
        },
        "required": [
          "message",
          "param"
        ]
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "errors": {
            "description": "Array of errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDto"
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "LocalizedText": {
        "type": "object",
        "properties": {}
      },
      "PlanDiscountDto": {
        "type": "object",
        "properties": {
          "quarterly": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "halfYearly": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "yearly": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "CreatePlanDto": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The title of the plan",
            "example": {
              "en": "Basic",
              "ar": "بسيط"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalizedText"
              }
            ]
          },
          "description": {
            "description": "The description of the plan",
            "example": {
              "en": "This is a basic plan",
              "ar": "هذه هي خطة مبتدئة"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalizedText"
              }
            ]
          },
          "price": {
            "type": "number",
            "minimum": 0
          },
          "planDuration": {
            "type": "number",
            "minimum": 0
          },
          "allowAds": {
            "type": "boolean"
          },
          "isUnlimited": {
            "type": "boolean"
          },
          "allowStaffMediaChatting": {
            "type": "boolean"
          },
          "allowMembersMediaChatting": {
            "type": "boolean"
          },
          "allowStaffMembersMediaChatting": {
            "type": "boolean"
          },
          "isUnlimitedClubStaff": {
            "type": "boolean"
          },
          "allowedClubStaff": {
            "type": "number",
            "minimum": 0
          },
          "isUnlimitedFreeClub": {
            "type": "boolean"
          },
          "allowedFreeClub": {
            "type": "number",
            "minimum": 0
          },
          "isUnlimitedClubMembers": {
            "type": "boolean"
          },
          "allowedClubMembers": {
            "type": "number",
            "minimum": 0
          },
          "isUnlimitedGroupMembers": {
            "type": "boolean"
          },
          "allowedGroupMembers": {
            "type": "number",
            "minimum": 0
          },
          "allowedStorage": {
            "type": "number",
            "minimum": 0
          },
          "allowVideoConference": {
            "type": "boolean"
          },
          "allowedWeeklyVideoConference": {
            "type": "number",
            "minimum": 0
          },
          "allowLargeVideoConference": {
            "type": "boolean"
          },
          "allowStaffCalling": {
            "type": "boolean"
          },
          "allowedStaffCalling": {
            "type": "number",
            "minimum": 0
          },
          "allowMarketing": {
            "type": "boolean"
          },
          "allowClubAdsPoint": {
            "type": "boolean"
          },
          "allowStaffChatting": {
            "type": "boolean"
          },
          "allowMembersChatting": {
            "type": "boolean"
          },
          "allowMembersCalling": {
            "type": "boolean"
          },
          "haveDiscount": {
            "type": "boolean"
          },
          "discount": {
            "$ref": "#/components/schemas/PlanDiscountDto"
          }
        },
        "required": [
          "title",
          "description",
          "price",
          "planDuration"
        ]
      },
      "UpdatePlanDto": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The title of the plan",
            "example": {
              "en": "Basic",
              "ar": "بسيط"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalizedText"
              }
            ]
          },
          "description": {
            "description": "The description of the plan",
            "example": {
              "en": "This is a basic plan",
              "ar": "هذه هي خطة مبتدئة"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalizedText"
              }
            ]
          },
          "price": {
            "type": "number",
            "minimum": 0
          },
          "planDuration": {
            "type": "number",
            "minimum": 0
          },
          "allowAds": {
            "type": "boolean"
          },
          "isUnlimited": {
            "type": "boolean"
          },
          "allowStaffMediaChatting": {
            "type": "boolean"
          },
          "allowMembersMediaChatting": {
            "type": "boolean"
          },
          "allowStaffMembersMediaChatting": {
            "type": "boolean"
          },
          "isUnlimitedClubStaff": {
            "type": "boolean"
          },
          "allowedClubStaff": {
            "type": "number",
            "minimum": 0
          },
          "isUnlimitedFreeClub": {
            "type": "boolean"
          },
          "allowedFreeClub": {
            "type": "number",
            "minimum": 0
          },
          "isUnlimitedClubMembers": {
            "type": "boolean"
          },
          "allowedClubMembers": {
            "type": "number",
            "minimum": 0
          },
          "isUnlimitedGroupMembers": {
            "type": "boolean"
          },
          "allowedGroupMembers": {
            "type": "number",
            "minimum": 0
          },
          "allowedStorage": {
            "type": "number",
            "minimum": 0
          },
          "allowVideoConference": {
            "type": "boolean"
          },
          "allowedWeeklyVideoConference": {
            "type": "number",
            "minimum": 0
          },
          "allowLargeVideoConference": {
            "type": "boolean"
          },
          "allowStaffCalling": {
            "type": "boolean"
          },
          "allowedStaffCalling": {
            "type": "number",
            "minimum": 0
          },
          "allowMarketing": {
            "type": "boolean"
          },
          "allowClubAdsPoint": {
            "type": "boolean"
          },
          "allowStaffChatting": {
            "type": "boolean"
          },
          "allowMembersChatting": {
            "type": "boolean"
          },
          "allowMembersCalling": {
            "type": "boolean"
          },
          "haveDiscount": {
            "type": "boolean"
          },
          "discount": {
            "$ref": "#/components/schemas/PlanDiscountDto"
          }
        }
      },
      "CreateAugmentationDto": {
        "type": "object",
        "properties": {
          "clubId": {
            "type": "string"
          },
          "feature": {
            "type": "string",
            "enum": [
              "allowedClubStaff",
              "allowedFreeClub",
              "allowedClubMembers",
              "allowedGroupMembers",
              "allowedStorage",
              "allowedWeeklyVideoConference",
              "allowedStaffCalling"
            ]
          },
          "quantity": {
            "type": "number",
            "minimum": 1
          },
          "durationMonths": {
            "type": "number",
            "minimum": 1
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "clubId",
          "feature",
          "quantity",
          "durationMonths",
          "reason"
        ]
      },
      "PlanAugmentationResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Augmentation unique identifier",
            "example": "507f1f77bcf86cd799439012"
          },
          "clubId": {
            "type": "string",
            "description": "Club ID",
            "example": "507f1f77bcf86cd799439013"
          },
          "featureType": {
            "type": "string",
            "description": "Feature type",
            "enum": [
              "staffCalling",
              "weeklyVideoConference",
              "storage"
            ],
            "example": "MEMBERS"
          },
          "requestedAmount": {
            "type": "number",
            "description": "Requested increase amount",
            "example": 100
          },
          "status": {
            "type": "string",
            "description": "Request status",
            "enum": [
              "PENDING",
              "APPROVED",
              "REJECTED"
            ],
            "example": "PENDING"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Rejection reason",
            "example": "Request exceeds maximum allowed limit"
          },
          "requestedBy": {
            "type": "string",
            "description": "User who requested the augmentation",
            "example": "507f1f77bcf86cd799439014"
          },
          "processedBy": {
            "type": "string",
            "description": "Admin who processed the request",
            "example": "507f1f77bcf86cd799439015"
          },
          "createdAt": {
            "type": "string",
            "description": "Request creation date",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Request last update date",
            "example": "2024-01-16T14:20:00.000Z"
          }
        },
        "required": [
          "_id",
          "clubId",
          "featureType",
          "requestedAmount",
          "status",
          "requestedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "WrappedPlanAugmentationResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Plan augmentation data",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanAugmentationResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "PaginatedPlanAugmentationResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of plan augmentations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanAugmentationResponseDto"
            }
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of items",
            "example": 100
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "totalCount"
        ]
      },
      "FeatureUsageResponseDto": {
        "type": "object",
        "properties": {
          "currentUsage": {
            "type": "number",
            "description": "Current usage amount",
            "example": 45
          },
          "limit": {
            "type": "number",
            "description": "Maximum allowed limit",
            "example": 100
          },
          "usagePercentage": {
            "type": "number",
            "description": "Usage percentage",
            "example": 45
          }
        },
        "required": [
          "currentUsage",
          "limit",
          "usagePercentage"
        ]
      },
      "WrappedFeatureUsageResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Feature usage data",
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureUsageResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "WrappedMessageResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response message",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "GeoPointDto": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 25.276987
          },
          "lng": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": 55.296249
          }
        },
        "required": [
          "lat",
          "lng"
        ]
      },
      "CreateEventDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the Event",
            "example": "clubApp Event"
          },
          "description": {
            "type": "string",
            "description": "Description of the Event",
            "example": "clubApp Event description"
          },
          "startDateTime": {
            "type": "string",
            "description": "Start DateTime of the Event",
            "example": "2025-05-25T10:58:14.565+00:00"
          },
          "endDateTime": {
            "type": "string",
            "description": "End DateTime of the Event",
            "example": "2025-05-25T12:00:00.000+00:00"
          },
          "accessType": {
            "type": "string",
            "description": "Who can access the event",
            "example": "guest",
            "enum": [
              "staff",
              "follower",
              "community",
              "guest"
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Type of the event (ONLINE - OFFLINE)",
            "example": "online",
            "enum": [
              "online",
              "offline"
            ]
          },
          "clubId": {
            "description": "The ID of the club this event belongs to",
            "example": "507f1f77bcf86cd799439011",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "meetingLink": {
            "type": "string",
            "description": "Meeting link for online events",
            "example": "https://zoom.com/meeting-id"
          },
          "locationDescription": {
            "type": "string",
            "description": "Location address for offline events",
            "example": "169 test street Riyadh"
          },
          "locationMapUrl": {
            "type": "string",
            "description": "Map URL for offline event location",
            "example": "https://maps.google.com"
          },
          "geopoint": {
            "description": "Geographic coordinates",
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoPointDto"
              }
            ]
          },
          "color": {
            "type": "string",
            "description": "Color of the event",
            "example": "red"
          },
          "recurringType": {
            "type": "string",
            "description": "Recurring type (DAILY, WEEKLY, MONTHLY)",
            "enum": [
              "none",
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "recurringStartDate": {
            "type": "string",
            "description": "Start date of recurring event",
            "example": "2025-05-25T10:58:14.565+00:00"
          },
          "recurringEndDate": {
            "type": "string",
            "description": "End date of recurring event",
            "example": "2025-05-25T10:58:14.565+00:00"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Array of media files to upload"
          }
        },
        "required": [
          "title",
          "description",
          "startDateTime",
          "endDateTime",
          "accessType",
          "eventType",
          "clubId",
          "geopoint",
          "color",
          "files"
        ]
      },
      "UpdateEventDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the Event",
            "example": "clubApp Event"
          },
          "description": {
            "type": "string",
            "description": "Description of the Event",
            "example": "clubApp Event description"
          },
          "startDateTime": {
            "type": "string",
            "description": "Start DateTime of the Event",
            "example": "2025-05-25T10:58:14.565+00:00"
          },
          "endDateTime": {
            "type": "string",
            "description": "End DateTime of the Event",
            "example": "2025-05-25T12:00:00.000+00:00"
          },
          "accessType": {
            "type": "string",
            "description": "Who can access the event",
            "example": "guest",
            "enum": [
              "staff",
              "follower",
              "community",
              "guest"
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Type of the event (ONLINE - OFFLINE)",
            "example": "online",
            "enum": [
              "online",
              "offline"
            ]
          },
          "clubId": {
            "description": "The ID of the club this event belongs to",
            "example": "507f1f77bcf86cd799439011",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          },
          "meetingLink": {
            "type": "string",
            "description": "Meeting link for online events",
            "example": "https://zoom.com/meeting-id"
          },
          "locationDescription": {
            "type": "string",
            "description": "Location address for offline events",
            "example": "169 test street Riyadh"
          },
          "locationMapUrl": {
            "type": "string",
            "description": "Map URL for offline event location",
            "example": "https://maps.google.com"
          },
          "geopoint": {
            "description": "Geographic coordinates",
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoPointDto"
              }
            ]
          },
          "color": {
            "type": "string",
            "description": "Color of the event",
            "example": "red"
          },
          "recurringType": {
            "type": "string",
            "description": "Recurring type (DAILY, WEEKLY, MONTHLY)",
            "enum": [
              "none",
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "recurringStartDate": {
            "type": "string",
            "description": "Start date of recurring event",
            "example": "2025-05-25T10:58:14.565+00:00"
          },
          "recurringEndDate": {
            "type": "string",
            "description": "End date of recurring event",
            "example": "2025-05-25T10:58:14.565+00:00"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Array of media files to upload"
          }
        }
      },
      "MakeInterestInEventDto": {
        "type": "object",
        "properties": {}
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the comment",
            "example": "This is a great article!",
            "maxLength": 1000
          },
          "parentCommentId": {
            "description": "ID of the parent comment (for replies)",
            "example": "60d21b4667d0d8992e610c85",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectId"
              }
            ]
          }
        },
        "required": [
          "content"
        ]
      },
      "CommentBasicResponseDto": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "example": "6800bb9385f4f340a1664682"
          },
          "itemType": {
            "type": "string",
            "example": "news"
          },
          "content": {
            "type": "string",
            "example": "This is a great article!"
          },
          "isEdited": {
            "type": "boolean",
            "example": false
          },
          "id": {
            "type": "string",
            "example": "683d62a4418c80c8c0f0abae"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-02T08:36:52.131Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-02T08:36:52.131Z"
          },
          "userId": {
            "type": "string",
            "example": "683c98b71bc6e2e0acfeb696"
          },
          "editedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-02T09:03:47.094Z"
          }
        },
        "required": [
          "itemId",
          "itemType",
          "content",
          "isEdited",
          "id",
          "createdAt",
          "updatedAt",
          "userId"
        ]
      },
      "CommentResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommentBasicResponseDto"
          }
        },
        "required": [
          "data"
        ]
      },
      "EditCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The updated content of the comment",
            "example": "This is my edited comment!",
            "maxLength": 1000
          }
        },
        "required": [
          "content"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Super Admin"
          },
          "username": {
            "type": "string",
            "example": "superadmin"
          },
          "image": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "id": {
            "type": "string",
            "example": "683c98b71bc6e2e0acfeb696"
          }
        },
        "required": [
          "name",
          "username",
          "image",
          "id"
        ]
      },
      "CommentsResponseDto": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "example": "6800bb9385f4f340a1664682"
          },
          "itemType": {
            "type": "string",
            "example": "news"
          },
          "content": {
            "type": "string",
            "example": "This is a great article!"
          },
          "isEdited": {
            "type": "boolean",
            "example": false
          },
          "id": {
            "type": "string",
            "example": "683d62a4418c80c8c0f0abae"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-02T08:36:52.131Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-02T08:36:52.131Z"
          },
          "userId": {
            "example": {
              "name": "Super Admin",
              "username": "superadmin",
              "image": "https://example.com/image.jpg",
              "id": "683c98b71bc6e2e0acfeb696"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDto"
              }
            ]
          },
          "replyCount": {
            "type": "number",
            "example": 0
          }
        },
        "required": [
          "itemId",
          "itemType",
          "content",
          "isEdited",
          "id",
          "createdAt",
          "updatedAt",
          "userId",
          "replyCount"
        ]
      },
      "CommentsArrayResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "example": [
              {
                "userId": {
                  "name": "Super Admin",
                  "username": "superadmin",
                  "image": "https://example.com/image.jpg",
                  "id": "683c98b71bc6e2e0acfeb696"
                },
                "itemId": "6800bb9385f4f340a1664682",
                "itemType": "news",
                "content": "This is a great article!",
                "isEdited": false,
                "createdAt": "2025-06-02T08:36:52.131Z",
                "updatedAt": "2025-06-02T08:36:52.131Z",
                "replyCount": 0,
                "id": "683d62a4418c80c8c0f0abae"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentsResponseDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "example": 15
          },
          "totalCount": {
            "type": "number",
            "example": 150
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "CommentCountResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "example": 5,
            "description": "Total number of comments for the item"
          }
        },
        "required": [
          "data"
        ]
      },
      "LikeResponseDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "683d6a5ab5aa93e742d2e335",
            "description": "User ID"
          },
          "itemId": {
            "type": "string",
            "example": "683d6a5ab5aa93e742d2e335",
            "description": "Item ID"
          },
          "reactionType": {
            "type": "string",
            "example": "like",
            "description": "Reaction type"
          },
          "itemType": {
            "type": "string",
            "example": "news",
            "description": "Item type"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-06-02T12:11:07.000Z",
            "description": "Created at"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-06-02T12:11:07.000Z",
            "description": "Updated at"
          },
          "id": {
            "type": "string",
            "example": "683d6a5ab5aa93e742d2e335",
            "description": "ID"
          }
        },
        "required": [
          "userId",
          "itemId",
          "reactionType",
          "itemType",
          "createdAt",
          "updatedAt",
          "id"
        ]
      },
      "LikeCreateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Like data",
            "allOf": [
              {
                "$ref": "#/components/schemas/LikeResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "LikesArrayResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of likes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LikeCreateResponseDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1,
            "description": "Current page number"
          },
          "limit": {
            "type": "number",
            "example": 10,
            "description": "Items per page"
          },
          "pageCount": {
            "type": "number",
            "example": 15,
            "description": "Total number of pages"
          },
          "totalCount": {
            "type": "number",
            "example": 150,
            "description": "Total number of items"
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "LikeCountResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "example": {
              "count": 10
            },
            "description": "Like count"
          }
        },
        "required": [
          "data"
        ]
      },
      "ReactionCounts": {
        "type": "object",
        "properties": {
          "like": {
            "type": "number",
            "example": 5,
            "description": "Number of like reactions"
          },
          "love": {
            "type": "number",
            "example": 3,
            "description": "Number of love reactions"
          },
          "haha": {
            "type": "number",
            "example": 2,
            "description": "Number of haha reactions"
          },
          "wow": {
            "type": "number",
            "example": 1,
            "description": "Number of wow reactions"
          },
          "sad": {
            "type": "number",
            "example": 0,
            "description": "Number of sad reactions"
          },
          "angry": {
            "type": "number",
            "example": 0,
            "description": "Number of angry reactions"
          },
          "total": {
            "type": "number",
            "example": 11,
            "description": "Total number of reactions"
          }
        },
        "required": [
          "like",
          "love",
          "haha",
          "wow",
          "sad",
          "angry",
          "total"
        ]
      },
      "ReactionCountsResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Reaction counts",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReactionCounts"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "FavoriteResponseCreateDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "683d6a5ab5aa93e742d2e335",
            "description": "User ID"
          },
          "itemId": {
            "type": "string",
            "example": "683d6a5ab5aa93e742d2e335",
            "description": "Item ID"
          },
          "itemType": {
            "type": "string",
            "example": "news",
            "description": "Item type"
          },
          "clubId": {
            "type": "string",
            "example": "683d6a5ab5aa93e742d2e335",
            "description": "Club ID"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-06-02T12:11:07.000Z",
            "description": "Created at"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-06-02T12:11:07.000Z",
            "description": "Updated at"
          },
          "id": {
            "type": "string",
            "example": "683d6a5ab5aa93e742d2e335",
            "description": "ID"
          }
        },
        "required": [
          "userId",
          "itemId",
          "itemType",
          "clubId",
          "createdAt",
          "updatedAt",
          "id"
        ]
      },
      "FavoriteResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Favorite data",
            "allOf": [
              {
                "$ref": "#/components/schemas/FavoriteResponseCreateDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "FavoritesArrayResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of favorites",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteResponseDto"
            }
          },
          "limit": {
            "type": "number",
            "example": 10,
            "description": "Items per page"
          },
          "page": {
            "type": "number",
            "example": 1,
            "description": "Current page number"
          },
          "pageCount": {
            "type": "number",
            "example": 1,
            "description": "Total number of pages"
          },
          "totalCount": {
            "type": "number",
            "example": 1,
            "description": "Total number of items"
          }
        },
        "required": [
          "data",
          "limit",
          "page",
          "pageCount",
          "totalCount"
        ]
      },
      "TopicResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subscribedTokens": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "subscribedTokens",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "TopicResponseDtoArrayResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicResponseDto"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "TopicResponseDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/TopicResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "CreateTopicDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the topic"
          },
          "description": {
            "type": "string",
            "description": "Description of the topic"
          }
        },
        "required": [
          "name"
        ]
      },
      "NotificationDataDto": {
        "type": "object",
        "properties": {
          "actionType": {
            "type": "string",
            "description": "Action type for the notification",
            "enum": [
              "REPLY",
              "APPROVE",
              "REJECT",
              "ADD_TO_CALENDAR",
              "JOIN",
              "ACCEPT_CALL",
              "DECLINE_CALL",
              "VOTE",
              "COMPLETE_TASK",
              "EXTEND_DEADLINE",
              "TRANSFER_SUPPORT"
            ]
          },
          "referenceId": {
            "type": "string",
            "description": "Reference ID related to the notification"
          },
          "link": {
            "type": "string",
            "description": "Link to navigate to when interacting with the notification"
          }
        }
      },
      "NotificationItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the notification",
            "example": "6820cb6534f25d3dcc04f054"
          },
          "notificationType": {
            "type": "string",
            "description": "Type of notification",
            "enum": [
              "JOIN_REQUEST_RECEIVED",
              "JOIN_REQUEST_APPROVED",
              "JOIN_REQUEST_REJECTED",
              "NEW_MEMBER_JOINED",
              "MULTIPLE_JOIN_REQUESTS",
              "LIKE",
              "NEW_MESSAGE",
              "MESSAGE_REPLIED",
              "MESSAGE_MENTIONED",
              "ADDED_TO_CHAT_ROOM",
              "NEW_GROUP_MESSAGE",
              "PLATFORM_MESSAGE",
              "MEETING_SCHEDULED",
              "MEETING_STARTED",
              "INCOMING_VOICE_CALL",
              "MISSED_VOICE_CALL",
              "COMMENT_ON_CONTENT",
              "LIKE_ON_CONTENT",
              "EVENT_REMINDER",
              "TASK_ASSIGNED",
              "TASK_REMINDER",
              "TASK_COMPLETED",
              "TASK_DEADLINE_EXTENDED",
              "SUPPORT_TRANSFERRED",
              "SUPPORT_ADDED",
              "ROLE_CHANGED",
              "ROLE_REMOVED",
              "NEW_CONTENT",
              "RECOMMENDED_CONTENT",
              "SUBSCRIPTION_EXPIRING",
              "STORAGE_LIMIT_APPROACHING",
              "PLAN_LIMIT_APPROACHING",
              "NEW_POLL",
              "POLL_ENDED",
              "CLUB_INVITATION"
            ]
          },
          "userId": {
            "type": "string",
            "description": "User ID the notification is for",
            "example": "680a61c6c8385be46f56a323"
          },
          "title": {
            "type": "string",
            "description": "Notification title",
            "example": "New join request"
          },
          "message": {
            "type": "string",
            "description": "Notification message",
            "example": "You have a new join request"
          },
          "data": {
            "description": "Additional data for the notification",
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationDataDto"
              }
            ]
          },
          "channels": {
            "type": "array",
            "description": "Channels the notification was sent through",
            "example": [
              "push",
              "inApp"
            ],
            "items": {
              "type": "string",
              "enum": [
                "push",
                "email",
                "sms",
                "inApp"
              ]
            }
          },
          "isRead": {
            "type": "boolean",
            "description": "Whether the notification has been read",
            "example": false
          },
          "isDelete": {
            "type": "boolean",
            "description": "Whether the notification has been deleted",
            "example": false
          },
          "isExpired": {
            "type": "boolean",
            "description": "Whether the notification has expired",
            "example": false
          },
          "isDelivered": {
            "type": "boolean",
            "description": "Whether the notification has been delivered",
            "example": true
          },
          "retryCount": {
            "type": "number",
            "description": "Number of retry attempts",
            "example": 0
          },
          "isScheduled": {
            "type": "boolean",
            "description": "Whether the notification is scheduled for future delivery",
            "example": false
          },
          "scheduledAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the notification is scheduled to be delivered"
          },
          "deliveredAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the notification was delivered"
          },
          "interactionCount": {
            "type": "number",
            "description": "Number of interactions with the notification",
            "example": 0
          },
          "lastInteractedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the notification was last interacted with"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-05-12T12:18:41.318Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-05-12T12:18:41.318Z"
          }
        },
        "required": [
          "id",
          "userId",
          "title",
          "message",
          "channels",
          "isRead",
          "isDelete",
          "isExpired",
          "isDelivered",
          "retryCount",
          "isScheduled",
          "interactionCount",
          "createdAt",
          "updatedAt"
        ]
      },
      "NotificationItemDtoArrayResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationItemDto"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "CountDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Count value",
            "example": 5
          }
        },
        "required": [
          "count"
        ]
      },
      "CountDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/CountDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "MessageResponseDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "ResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Response data"
          }
        },
        "required": [
          "data"
        ]
      },
      "DefaultChannelsDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean",
            "description": "Enable or disable email notifications",
            "example": true
          },
          "push": {
            "type": "boolean",
            "description": "Enable or disable push notifications",
            "example": false
          },
          "sms": {
            "type": "boolean",
            "description": "Enable or disable SMS notifications",
            "example": true
          },
          "inApp": {
            "type": "boolean",
            "description": "Enable or disable in-app notifications",
            "example": false
          }
        }
      },
      "DefaultChannelsDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultChannelsDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "QuietHoursDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether quiet hours are enabled",
            "example": true
          },
          "startHour": {
            "type": "number",
            "description": "Starting hour for quiet hours (0–23)",
            "example": 22,
            "minimum": 0,
            "maximum": 23
          },
          "endHour": {
            "type": "number",
            "description": "Ending hour for quiet hours (0–23)",
            "example": 6,
            "minimum": 0,
            "maximum": 23
          },
          "timezone": {
            "type": "string",
            "description": "IANA time zone identifier for quiet hours (e.g., Asia/Riyadh)",
            "example": "Asia/Riyadh"
          }
        }
      },
      "QuietHoursDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuietHoursDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "PrivacySettingsDto": {
        "type": "object",
        "properties": {
          "dataRetentionDays": {
            "type": "number",
            "description": "Number of days to retain user data",
            "example": 90,
            "minimum": 1
          },
          "marketingConsent": {
            "type": "boolean",
            "description": "Whether the user has consented to marketing communications",
            "example": true
          },
          "dataProcessingConsent": {
            "type": "boolean",
            "description": "Whether the user has consented to data processing",
            "example": true
          }
        }
      },
      "PrivacySettingsDtoResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivacySettingsDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "CreateAlbumDto": {
        "type": "object",
        "properties": {
          "label": {
            "description": "The label of the album",
            "example": {
              "ar": "الألبوم الأول",
              "en": "First Album"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiLangStringDto"
              }
            ]
          },
          "description": {
            "description": "The description of the album",
            "example": {
              "ar": "وصف الألبوم",
              "en": "Album description"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiLangStringDto"
              }
            ]
          },
          "accessType": {
            "type": "string",
            "description": "The access type of the album",
            "example": "guest",
            "enum": [
              "guest",
              "follower",
              "community",
              "staff"
            ]
          },
          "clubId": {
            "type": "string",
            "description": "The ID of the club this album belongs to",
            "example": "507f1f77bcf86cd799439011"
          },
          "baseImage": {
            "type": "string",
            "description": "The base image of the album",
            "format": "binary"
          },
          "isCommentable": {
            "type": "boolean",
            "description": "Whether the album is commentable",
            "example": true,
            "default": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the album is private",
            "example": true,
            "default": false
          }
        },
        "required": [
          "label",
          "description",
          "accessType",
          "clubId",
          "baseImage",
          "isCommentable",
          "isPrivate"
        ]
      },
      "ImageMetadataDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Image URL",
            "example": "https://example.com/images/album/original.jpg"
          },
          "width": {
            "type": "number",
            "description": "Image width in pixels",
            "example": 1920
          },
          "height": {
            "type": "number",
            "description": "Image height in pixels",
            "example": 1080
          },
          "size": {
            "type": "number",
            "description": "Image file size in bytes",
            "example": 1048576
          }
        },
        "required": [
          "url",
          "width",
          "height",
          "size"
        ]
      },
      "BaseImageDto": {
        "type": "object",
        "properties": {
          "original": {
            "description": "Original image metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageMetadataDto"
              }
            ]
          },
          "thumbnail": {
            "description": "Thumbnail image metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageMetadataDto"
              }
            ]
          },
          "medium": {
            "description": "Medium size image metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageMetadataDto"
              }
            ]
          }
        },
        "required": [
          "original",
          "thumbnail",
          "medium"
        ]
      },
      "AlbumResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Album unique identifier",
            "example": "507f1f77bcf86cd799439011"
          },
          "label": {
            "description": "Album label in multiple languages",
            "example": {
              "ar": "ألبوم الرحلة الصيفية",
              "en": "Summer Trip Album"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiLangStringDto"
              }
            ]
          },
          "description": {
            "description": "Album description in multiple languages",
            "example": {
              "ar": "صور من رحلتنا الصيفية الرائعة",
              "en": "Photos from our amazing summer trip"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiLangStringDto"
              }
            ]
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the album is private",
            "example": false
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created the album",
            "example": "507f1f77bcf86cd799439012"
          },
          "club": {
            "type": "string",
            "description": "Club ID that owns the album",
            "example": "507f1f77bcf86cd799439013"
          },
          "media": {
            "description": "Array of media IDs in the album",
            "example": [
              "507f1f77bcf86cd799439014",
              "507f1f77bcf86cd799439015"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mediaCount": {
            "type": "number",
            "description": "Total number of media items in the album",
            "example": 25
          },
          "accessType": {
            "type": "string",
            "description": "Album access type",
            "enum": [
              "guest",
              "follower",
              "community",
              "staff"
            ],
            "example": "guest"
          },
          "isCommentable": {
            "type": "boolean",
            "description": "Whether comments are allowed on this album",
            "example": true
          },
          "commentsCount": {
            "type": "number",
            "description": "Total number of comments on the album",
            "example": 12
          },
          "likesCount": {
            "type": "number",
            "description": "Total number of likes on the album",
            "example": 45
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Whether the album is soft deleted",
            "example": false
          },
          "baseImage": {
            "description": "Base image of the album with different sizes",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImageDto"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Album creation date",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Album last update date",
            "example": "2024-01-16T14:20:00.000Z"
          }
        },
        "required": [
          "_id",
          "label",
          "description",
          "isPrivate",
          "createdBy",
          "club",
          "media",
          "mediaCount",
          "accessType",
          "isCommentable",
          "commentsCount",
          "likesCount",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "WrappedAlbumResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Album data",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlbumResponseDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "PaginatedAlbumsResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of albums",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlbumResponseDto"
            }
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages",
            "example": 15
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of albums",
            "example": 150
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "UpdateAlbumDto": {
        "type": "object",
        "properties": {
          "label": {
            "description": "The label of the album",
            "example": {
              "ar": "الألبوم الأول",
              "en": "First Album"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiLangStringDto"
              }
            ]
          },
          "description": {
            "description": "The description of the album",
            "example": {
              "ar": "وصف الألبوم",
              "en": "Album description"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiLangStringDto"
              }
            ]
          },
          "accessType": {
            "type": "string",
            "description": "The access type of the album",
            "example": "guest",
            "enum": [
              "guest",
              "follower",
              "community",
              "staff"
            ]
          },
          "clubId": {
            "type": "string",
            "description": "The ID of the club this album belongs to",
            "example": "507f1f77bcf86cd799439011"
          },
          "baseImage": {
            "type": "string",
            "description": "The base image of the album",
            "format": "binary"
          },
          "isCommentable": {
            "type": "boolean",
            "description": "Whether the album is commentable",
            "example": true,
            "default": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the album is private",
            "example": true,
            "default": false
          }
        }
      },
      "CreateMediaDto": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Array of media files to upload"
          }
        },
        "required": [
          "files"
        ]
      },
      "MediaMetadataDto": {
        "type": "object",
        "properties": {
          "original": {
            "type": "object",
            "description": "Original media metadata",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Duration for video files",
                "example": "00:02:30"
              },
              "url": {
                "type": "string",
                "description": "Original media URL",
                "example": "https://example.com/media/original.mp4"
              },
              "width": {
                "type": "string",
                "description": "Media width",
                "example": "1920"
              },
              "height": {
                "type": "string",
                "description": "Media height",
                "example": "1080"
              },
              "size": {
                "type": "string",
                "description": "File size in bytes",
                "example": "52428800"
              }
            }
          },
          "thumbnail": {
            "type": "object",
            "description": "Thumbnail media metadata",
            "properties": {
              "url": {
                "type": "string",
                "description": "Thumbnail URL",
                "example": "https://example.com/media/thumbnail.jpg"
              },
              "width": {
                "type": "string",
                "description": "Thumbnail width",
                "example": "320"
              },
              "height": {
                "type": "string",
                "description": "Thumbnail height",
                "example": "240"
              },
              "size": {
                "type": "string",
                "description": "Thumbnail size in bytes",
                "example": "25600"
              }
            }
          }
        },
        "required": [
          "original",
          "thumbnail"
        ]
      },
      "MediaResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Media unique identifier",
            "example": "507f1f77bcf86cd799439014"
          },
          "clubId": {
            "type": "string",
            "description": "Club ID that owns the media",
            "example": "507f1f77bcf86cd799439013"
          },
          "albumId": {
            "type": "string",
            "description": "Album ID that contains the media",
            "example": "507f1f77bcf86cd799439011"
          },
          "type": {
            "type": "string",
            "description": "Media type",
            "enum": [
              "image",
              "video",
              "document"
            ],
            "example": "image"
          },
          "metadata": {
            "description": "Media metadata including original and thumbnail",
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaMetadataDto"
              }
            ]
          },
          "createBy": {
            "type": "string",
            "description": "User ID who uploaded the media",
            "example": "507f1f77bcf86cd799439012"
          },
          "createdAt": {
            "type": "string",
            "description": "Media creation date",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Media last update date",
            "example": "2024-01-16T14:20:00.000Z"
          }
        },
        "required": [
          "_id",
          "clubId",
          "albumId",
          "type",
          "metadata",
          "createBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "MediaUploadResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of uploaded media items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponseDto"
            }
          },
          "count": {
            "type": "number",
            "description": "Number of media items uploaded",
            "example": 3
          }
        },
        "required": [
          "data",
          "count"
        ]
      },
      "MediaValidationErrorDto": {
        "type": "object",
        "properties": {
          "errors": {
            "description": "Array of validation errors",
            "example": [
              {
                "message": "File type not supported",
                "param": "files"
              },
              {
                "message": "File size exceeds limit (100MB)",
                "param": "files"
              },
              {
                "message": "Maximum 30 files allowed per upload",
                "param": "files"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "MediaPermissionErrorDto": {
        "type": "object",
        "properties": {
          "errors": {
            "description": "Array of error messages",
            "example": [
              {
                "message": "You do not have permission to upload media to this album",
                "param": "permission"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "MediaUploadErrorDto": {
        "type": "object",
        "properties": {
          "errors": {
            "description": "Array of error messages",
            "example": [
              {
                "message": "File too large",
                "param": "files"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "PaginatedMediaResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of media items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponseDto"
            }
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 20
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages",
            "example": 8
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of media items",
            "example": 150
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "MediaNotFoundErrorDto": {
        "type": "object",
        "properties": {
          "errors": {
            "description": "Array of error messages",
            "example": [
              {
                "message": "Media not found",
                "param": "mediaId"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "Title": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "example": "English Title"
          },
          "ar": {
            "type": "string",
            "example": "العنوان بالعربي"
          }
        },
        "required": [
          "en",
          "ar"
        ]
      },
      "SubCategoryMediaDto": {
        "type": "object",
        "properties": {
          "original": {
            "type": "object",
            "example": {
              "url": "https://example.com/image.jpg",
              "width": 800,
              "height": 600,
              "size": 1024
            },
            "description": "Original image"
          },
          "thumbnail": {
            "type": "object",
            "example": {
              "url": "https://example.com/thumbnail.jpg",
              "width": 200,
              "height": 150,
              "size": 256
            },
            "description": "Thumbnail image"
          },
          "medium": {
            "type": "object",
            "example": {
              "url": "https://example.com/medium.jpg",
              "width": 400,
              "height": 300,
              "size": 512
            },
            "description": "Medium-sized image"
          }
        },
        "required": [
          "original",
          "thumbnail",
          "medium"
        ]
      },
      "SubCategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "title": {
            "$ref": "#/components/schemas/Title"
          },
          "name": {
            "type": "string",
            "example": "sub-category-name"
          },
          "icon": {
            "$ref": "#/components/schemas/SubCategoryMediaDto"
          },
          "parentId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "updatedBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-06-02T10:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-06-02T10:00:00.000Z"
          }
        },
        "required": [
          "id",
          "title",
          "name",
          "icon",
          "parentId",
          "isActive",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "SubCategoriesResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubCategoryDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "example": 6
          },
          "totalCount": {
            "type": "number",
            "example": 57
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "CreateSubCategoryDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "en": "en",
              "ar": "ar"
            }
          },
          "name": {
            "type": "string",
            "example": "category name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          },
          "parentId": {
            "type": "string",
            "example": "685dcbd6a0736b231ec2e5b9"
          }
        },
        "required": [
          "title",
          "name",
          "parentId"
        ]
      },
      "SubCategoryResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubCategoryDto"
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateSubCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "category name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          },
          "parentId": {
            "type": "string",
            "example": "685dcbd6a0736b231ec2e5ba"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateSettingDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "name"
          },
          "guest_permissions": {
            "type": "object",
            "example": {
              "resource": "user",
              "actions": [
                "create",
                "read",
                "update",
                "delete"
              ]
            }
          }
        },
        "required": [
          "name",
          "guest_permissions"
        ]
      },
      "UpdateSettingDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "name"
          },
          "guest_permissions": {
            "type": "object",
            "example": {
              "resource": "user",
              "actions": [
                "create",
                "read",
                "update",
                "delete"
              ]
            }
          }
        }
      },
      "MajorTitleDto": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "example": "Engineering"
          },
          "ar": {
            "type": "string",
            "example": "الهندسة"
          }
        },
        "required": [
          "en",
          "ar"
        ]
      },
      "MajorMediaDto": {
        "type": "object",
        "properties": {
          "original": {
            "type": "object",
            "example": {
              "url": "https://storage.googleapis.com/clubapp-media/majors/original/major-icon-123456.png",
              "width": 800,
              "height": 600,
              "size": 102400
            }
          },
          "thumbnail": {
            "type": "object",
            "example": {
              "url": "https://storage.googleapis.com/clubapp-media/majors/thumbnail/major-icon-123456.png",
              "width": 200,
              "height": 150,
              "size": 25600
            }
          },
          "medium": {
            "type": "object",
            "example": {
              "url": "https://storage.googleapis.com/clubapp-media/majors/medium/major-icon-123456.png",
              "width": 400,
              "height": 300,
              "size": 51200
            }
          }
        },
        "required": [
          "original",
          "thumbnail",
          "medium"
        ]
      },
      "MajorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "title": {
            "$ref": "#/components/schemas/MajorTitleDto"
          },
          "name": {
            "type": "string",
            "example": "engineering"
          },
          "icon": {
            "$ref": "#/components/schemas/MajorMediaDto"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "updatedBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-06-01T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-06-01T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "title",
          "name",
          "icon",
          "isActive",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "MajorsResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorDto"
            }
          },
          "totalItems": {
            "type": "number",
            "example": 25
          },
          "currentPage": {
            "type": "number",
            "example": 1
          },
          "totalPages": {
            "type": "number",
            "example": 3
          }
        },
        "required": [
          "data",
          "totalItems",
          "currentPage",
          "totalPages"
        ]
      },
      "CreateMajorDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "en": "English Title",
              "ar": "العنوان العربي"
            }
          },
          "name": {
            "type": "string",
            "example": "major name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          }
        },
        "required": [
          "title",
          "name"
        ]
      },
      "MajorResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MajorDto"
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateMajorDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "en": "English Title",
              "ar": "العنوان العربي"
            }
          },
          "name": {
            "type": "string",
            "example": "major name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          }
        }
      },
      "SubMajorTitleDto": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "example": "Computer Science"
          },
          "ar": {
            "type": "string",
            "example": "علوم الحاسب"
          }
        },
        "required": [
          "en",
          "ar"
        ]
      },
      "SubMajorMediaDto": {
        "type": "object",
        "properties": {
          "original": {
            "type": "object",
            "example": {
              "url": "https://storage.googleapis.com/clubapp-media/sub-majors/original/sub-major-icon-123456.png",
              "width": 800,
              "height": 600,
              "size": 102400
            }
          },
          "thumbnail": {
            "type": "object",
            "example": {
              "url": "https://storage.googleapis.com/clubapp-media/sub-majors/thumbnail/sub-major-icon-123456.png",
              "width": 200,
              "height": 150,
              "size": 25600
            }
          },
          "medium": {
            "type": "object",
            "example": {
              "url": "https://storage.googleapis.com/clubapp-media/sub-majors/medium/sub-major-icon-123456.png",
              "width": 400,
              "height": 300,
              "size": 51200
            }
          }
        },
        "required": [
          "original",
          "thumbnail",
          "medium"
        ]
      },
      "SubMajorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "title": {
            "$ref": "#/components/schemas/SubMajorTitleDto"
          },
          "name": {
            "type": "string",
            "example": "computer-science"
          },
          "icon": {
            "$ref": "#/components/schemas/SubMajorMediaDto"
          },
          "parentId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "updatedBy": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-06-01T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2023-06-01T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "title",
          "name",
          "icon",
          "parentId",
          "isActive",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "SubMajorsResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubMajorDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 10
          },
          "pageCount": {
            "type": "number",
            "example": 6
          },
          "totalCount": {
            "type": "number",
            "example": 57
          }
        },
        "required": [
          "data",
          "page",
          "limit",
          "pageCount",
          "totalCount"
        ]
      },
      "CreateSubMajorDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "en": "English Title",
              "ar": "العنوان العربي"
            }
          },
          "name": {
            "type": "string",
            "example": "sub-major name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          },
          "parentId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          }
        },
        "required": [
          "title",
          "name",
          "parentId"
        ]
      },
      "SubMajorResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubMajorDto"
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateSubMajorDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "example": {
              "en": "English Title",
              "ar": "العنوان العربي"
            }
          },
          "name": {
            "type": "string",
            "example": "sub-major name"
          },
          "icon": {
            "type": "string",
            "description": "Media files for the article",
            "format": "binary"
          },
          "parentId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          }
        }
      },
      "SchedulePaymentDTO": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "example": 1000
          },
          "lang": {
            "type": "string",
            "example": "en"
          },
          "userId": {
            "type": "string",
            "example": "user123"
          },
          "numberOfRepetitions": {
            "type": "number",
            "example": 12
          },
          "repetitionInterval": {
            "type": "number",
            "example": 3
          },
          "intervalFrequency": {
            "type": "number",
            "example": 1
          },
          "countryCode": {
            "type": "string",
            "example": "SA"
          },
          "clubId": {
            "type": "string",
            "example": "club456"
          },
          "planId": {
            "type": "string",
            "example": "plan789"
          },
          "profileStatus": {
            "type": "string",
            "example": "test"
          },
          "platform": {
            "type": "string",
            "example": "mobile"
          }
        },
        "required": [
          "amount",
          "lang",
          "userId",
          "numberOfRepetitions",
          "repetitionInterval",
          "intervalFrequency",
          "countryCode",
          "clubId",
          "planId"
        ]
      },
      "MediaMetadata": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "width": {
            "type": "object"
          },
          "height": {
            "type": "object"
          },
          "size": {
            "type": "object"
          },
          "fileType": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "width",
          "height",
          "size"
        ]
      },
      "MediaItem": {
        "type": "object",
        "properties": {
          "original": {
            "$ref": "#/components/schemas/MediaMetadata"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/MediaMetadata"
          }
        },
        "required": [
          "original",
          "thumbnail"
        ]
      },
      "Reactions": {
        "type": "object",
        "properties": {
          "like": {
            "type": "number"
          },
          "love": {
            "type": "number"
          },
          "haha": {
            "type": "number"
          },
          "wow": {
            "type": "number"
          },
          "sad": {
            "type": "number"
          },
          "angry": {
            "type": "number"
          }
        },
        "required": [
          "like",
          "love",
          "haha",
          "wow",
          "sad",
          "angry"
        ]
      },
      "Likes": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "reactions": {
            "$ref": "#/components/schemas/Reactions"
          }
        },
        "required": [
          "count",
          "reactions"
        ]
      },
      "Comments": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "Engagement": {
        "type": "object",
        "properties": {
          "likes": {
            "$ref": "#/components/schemas/Likes"
          },
          "comments": {
            "$ref": "#/components/schemas/Comments"
          }
        },
        "required": [
          "likes",
          "comments"
        ]
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ClubInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "object"
          },
          "image": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaItem"
            }
          },
          "description": {
            "type": "object"
          },
          "slug": {
            "type": "string"
          },
          "clubType": {
            "type": "string"
          },
          "clubVerified": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "image",
          "description",
          "slug",
          "clubType",
          "clubVerified"
        ]
      },
      "ArticleOrNews": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "accessType": {
            "type": "string"
          },
          "ViewLanguage": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "clubId": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaItem"
            }
          },
          "isPublished": {
            "type": "boolean"
          },
          "isIndexed": {
            "type": "boolean"
          },
          "isPendingDeletion": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "allowComments": {
            "type": "boolean"
          },
          "viewCount": {
            "type": "number"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "timeSincePosting": {
            "type": "string"
          },
          "engagement": {
            "$ref": "#/components/schemas/Engagement"
          },
          "userInfo": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "clubInfo": {
            "$ref": "#/components/schemas/ClubInfo"
          }
        },
        "required": [
          "type",
          "title",
          "content",
          "accessType",
          "ViewLanguage",
          "createdBy",
          "updatedBy",
          "clubId",
          "media",
          "isPublished",
          "isIndexed",
          "isPendingDeletion",
          "isDeleted",
          "allowComments",
          "viewCount",
          "createdAt",
          "updatedAt",
          "id",
          "timeSincePosting",
          "engagement",
          "userInfo",
          "clubInfo"
        ]
      },
      "EventMedia": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "metadata",
          "type",
          "_id"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "clubId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "recurringStartDate": {
            "type": "string"
          },
          "recurringEndDate": {
            "type": "string"
          },
          "isLive": {
            "type": "boolean"
          },
          "color": {
            "type": "string"
          },
          "accessType": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "meetingLink": {
            "type": "string"
          },
          "locationDescription": {
            "type": "string"
          },
          "locationMapUrl": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventMedia"
            }
          },
          "createdBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "clubId",
          "title",
          "description",
          "startDateTime",
          "endDateTime",
          "recurringStartDate",
          "recurringEndDate",
          "isLive",
          "color",
          "accessType",
          "eventType",
          "meetingLink",
          "locationDescription",
          "locationMapUrl",
          "media",
          "createdBy",
          "createdAt",
          "updatedAt",
          "id"
        ]
      },
      "FeedData": {
        "type": "object",
        "properties": {
          "articlesAndNews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleOrNews"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "articlesAndNews",
          "events"
        ]
      },
      "HomeFeedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FeedData"
          }
        },
        "required": [
          "data"
        ]
      },
      "ErrorItem": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "clubId must not be empty"
          },
          "param": {
            "type": "string",
            "example": "clubId"
          }
        },
        "required": [
          "message",
          "param"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorItem"
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "ClubHomeFeedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FeedData"
          }
        },
        "required": [
          "data"
        ]
      }
    }
  }
}